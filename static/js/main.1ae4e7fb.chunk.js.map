{"version":3,"sources":["components/GraphicsAreaPureHTML.js","components/CanvasDraw2D.js","components/TopBar.js","App.js","serviceWorker.js","index.js"],"names":["GraphicsAreaPureHTML","dragHandlers","onStart","this","onStop","className","style","transform","props","scale","position","top","left","connections","map","key","index","x1","nodes","from","nodeIndex","x","y1","y","x2","to","y2","stroke","onDrag","e","onSetPostition","xmlns","cx","cy","r","fill","opacity","title","width","height","React","Component","CanvasDraw2D","renderCanvas","canvasId","canvas","draw2d","Canvas","start","shape","node","Start","end","End","add","c","Connection","setSourceDecorator","decoration","connection","BarDecorator","setTargetDecorator","DiamondDecorator","setSource","getOutputPort","setTarget","getInputPort","figure","analog","OpAmp","p1","basic","Polygon","p2","setBackgroundColor","setAlpha","setDimension","setCurrentSelection","id","wrapperStyle","margin","Handle","Slider","handle","value","dragging","restProps","prefixCls","overlay","visible","placement","TopBar","showControls","min","max","defaultValue","defaultScale","onChange","label","tagName","filename","exportFile","JSON","stringify","state","App","pureHTMLgraph","activeDrags","deltaPosition","inputPorts","name","type","outputPorts","knobValue","setState","setPositionOnNode","newState","onControlledDragUtil","radius","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ae4e7fb.chunk.js","sourcesContent":["import React from \"react\";\nimport Draggable from \"react-draggable\";\nimport { InlineMath } from \"react-katex\";\n\nclass GraphicsAreaPureHTML extends React.Component {\n  render() {\n    const dragHandlers = { onStart: this.onStart, onStop: this.onStop };\n    return (\n      <div\n        className=\"graphicsarea\"\n        style={{ transform: \"scale(\" + this.props.scale + \")\" }}\n      >\n        <svg\n          className=\"arrowsvg\"\n          style={{ position: \"relative\", top: \"0px\", left: \"0px\" }}\n        >\n          {this.props.connections.map((key, index) => (\n            <line\n              x1={this.props.nodes[key.from.nodeIndex].position.x}\n              y1={this.props.nodes[key.from.nodeIndex].position.y}\n              x2={this.props.nodes[key.to.nodeIndex].position.x}\n              y2={this.props.nodes[key.to.nodeIndex].position.y}\n              style={{ stroke: \"rgb(0,0,0)\", \"stroke-width\": 2 }}\n            />\n          ))}\n        </svg>\n        {this.props.nodes.map((key, index) => (\n          <Draggable\n            scale={this.props.scale}\n            position={this.props.nodes[index].position}\n            {...dragHandlers}\n            onDrag={(e, position) => this.props.onSetPostition(index, position)}\n          >\n            <div className=\"box no-cursor\">\n              <svg className=\"graphics inport\">\n                <circle\n                  className=\"circle\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  cx=\"15\"\n                  cy=\"15\"\n                  r=\"15\"\n                  style={{\n                    stroke: \"#000000\",\n                    \"stroke-width\": 3,\n                    fill: \"#66ff66\"\n                  }}\n                  opacity=\".7\"\n                />\n              </svg>\n\n              <div className=\"drag\">{key.title}</div>\n              <h3>\n                <InlineMath>\\int_0^\\infty x^2 dx</InlineMath>\n              </h3>\n\n              <svg className=\"graphics outport\" width=\"30\" height=\"30\">\n                <circle\n                  className=\"circle\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  cx=\"15\"\n                  cy=\"15\"\n                  r=\"15\"\n                  style={{\n                    stroke: \"#000000\",\n                    \"stroke-width\": 3,\n                    fill: \"#ff0000\"\n                  }}\n                  opacity=\".7\"\n                />\n              </svg>\n            </div>\n          </Draggable>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default GraphicsAreaPureHTML;\n","import React from \"react\";\nimport draw2d from \"draw2d\";\n\nexport default class CanvasDraw2D extends React.Component {\n  componentDidMount() {\n    this.renderCanvas(\"mycanvasdraw2d\");\n  }\n\n  renderCanvas(canvasId) {\n    var canvas = new draw2d.Canvas(canvasId);\n\n    // create and add two nodes which contains Ports (In and OUT)\n    //\n    var start = new draw2d.shape.node.Start();\n    var end = new draw2d.shape.node.End();\n\n    // ...add it to the canvas\n    canvas.add(start, 50, 50);\n    canvas.add(new draw2d.shape.node.Start(), 50, 250);\n    canvas.add(end, 230, 80);\n\n    // Create a Connection and connect the Start and End node\n    //\n    var c = new draw2d.Connection();\n\n    // Set the endpoint decorations for the connection\n    //\n    c.setSourceDecorator(new draw2d.decoration.connection.BarDecorator());\n    c.setTargetDecorator(new draw2d.decoration.connection.DiamondDecorator());\n    // Connect the endpoints with the start and end port\n    //\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n\n    // and finally add the connection to the canvas\n    canvas.add(c);\n\n    var figure = new draw2d.shape.analog.OpAmp();\n    canvas.add(figure, 350, 110);\n\n    var p1 = new draw2d.shape.basic.Polygon();\n    var p2 = new draw2d.shape.basic.Polygon();\n\n    canvas.add(p1, 450, 150);\n    canvas.add(p2, 450, 200);\n\n    p2.setBackgroundColor(\"#f0f000\");\n    p2.setAlpha(0.7);\n    p2.setDimension(100, 60);\n\n    canvas.setCurrentSelection(p2);\n  }\n\n  render() {\n    return <div id=\"mycanvasdraw2d\"></div>;\n  }\n}\n\nexport class GraphicsAreaDraw2D extends React.Component {\n  render() {\n    return (\n      <div className=\"graphicsarea\" style={{ transform: \"scale(1)\" }}>\n        <CanvasDraw2D className=\"canvas2darea\" />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport DownloadLink from \"react-download-link\";\nimport \"rc-slider/assets/index.css\";\nimport \"rc-tooltip/assets/bootstrap.css\";\n\nimport Tooltip from \"rc-tooltip\";\nimport Slider from \"rc-slider\";\n\nconst wrapperStyle = { width: 400, margin: 50 };\n\nconst Handle = Slider.Handle;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nconst TopBar = props => {\n  if (props.showControls) {\n    return (\n      <div className=\"topbar\">\n        <div className=\"zoom\" style={wrapperStyle}>\n          <Slider\n            min={20}\n            max={150}\n            defaultValue={props.defaultScale}\n            handle={handle}\n            onChange={props.onChange}\n          />\n        </div>\n        <DownloadLink\n          label=\"Save state to disk\"\n          className=\"savestate\"\n          tagName=\"h2\"\n          filename=\"state.txt\"\n          exportFile={() => JSON.stringify(this.state, null, 2)}\n        >\n          <h1>Save sta2te to disk</h1>\n        </DownloadLink>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"topbar\">\n        <DownloadLink\n          label=\"Save state to disk\"\n          className=\"savestate\"\n          tagName=\"h2\"\n          filename=\"state.txt\"\n          exportFile={() => JSON.stringify(this.state, null, 2)}\n        >\n          <h1>Save state to disk</h1>\n        </DownloadLink>\n      </div>\n    );\n  }\n};\n\nexport default TopBar;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport GraphicsAreaPureHTML from \"./components/GraphicsAreaPureHTML\";\nimport GraphicsAreaDraw2D from \"./components/CanvasDraw2D\";\n\nimport \"katex/dist/katex.min.css\";\n\nimport TopBar from \"./components/TopBar\";\n\nconst kNoMetod = { nodeId: -1, direction: \"input\", type: \"N/A\" };\n\nclass App extends React.Component {\n  state = {\n    pureHTMLgraph: true,\n    scale: 0.9,\n    activeDrags: 0,\n    deltaPosition: {\n      x: 0,\n      y: 0\n    },\n    nodes: [\n      {\n        title: \"2D shape transformation\",\n        id: 213,\n        position: {\n          x: 260,\n          y: 0\n        },\n        inputPorts: [\n          { name: \"in x\", type: \"int\" },\n          { name: \"in y\", type: \"int\" }\n        ],\n        outputPorts: [\n          { name: \"out x\", type: \"float\" },\n          { name: \"out y\", type: \"float\" }\n        ]\n      },\n      {\n        title: \"Measurement\",\n        id: 19,\n        position: {\n          x: 350,\n          y: 100\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" },\n          { name: \"the grid\", type: \"se.minerva.Grid\" }\n        ],\n        outputPorts: [\n          { name: \"result x\", type: \"float\" },\n          { name: \"result y\", type: \"float\" },\n          { name: \"result z\", type: \"float\" }\n        ]\n      },\n      {\n        title: \"Colorizer\",\n        id: 23,\n        position: {\n          x: 510,\n          y: 236\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" }\n        ],\n        outputPorts: [\n          { name: \"red\", type: \"int\" },\n          { name: \"blue\", type: \"int\" },\n          { name: \"green\", type: \"int\" },\n          { name: \"alpha\", type: \"float\" },\n          { name: \"grid\", type: \"se.minerva.Grid\" }\n        ]\n      },\n      {\n        title: \"1D transformation\",\n        id: 101,\n        position: {\n          x: 95,\n          y: 236\n        },\n        inputPorts: [{ name: \"x\", type: \"float\" }],\n        outputPorts: [{ name: \"x\", type: \"float\" }]\n      }\n    ],\n    connections: [\n      {\n        from: {\n          nodeIndex: 0,\n          index: 0\n        },\n        to: {\n          nodeIndex: 1,\n          index: 1\n        }\n      },\n      {\n        from: {\n          nodeIndex: 2,\n          index: 4\n        },\n        to: {\n          nodeIndex: 1,\n          index: 2\n        }\n      },\n      {\n        from: {\n          nodeIndex: 3,\n          index: 0\n        },\n        to: {\n          nodeIndex: 1,\n          index: 1\n        }\n      }\n    ],\n    knobValue: 50\n  };\n\n  onStart = () => {\n    this.setState({ activeDrags: this.state.activeDrags + 1 });\n  };\n\n  onStop = () => {\n    this.setState({ activeDrags: this.state.activeDrags - 1 });\n  };\n\n  // For controlled component\n\n  setPositionOnNode = (index, position) => {\n    var newState = { ...this.state };\n    newState.nodes[index].position.x = position.x;\n    newState.nodes[index].position.y = position.y;\n    this.setState(newState);\n  };\n\n  onControlledDragUtil = (e, position, index) => {\n    var newState = { ...this.state };\n    newState.nodes[index].position.x = position.x;\n    newState.nodes[index].position.y = position.y;\n    this.setState(newState);\n  };\n\n  onControlledDrag(index) {\n    return (e, position) => {\n      this.onControlledDragUtil(e, position, index);\n    };\n  }\n\n  onControlledDragStop(index) {\n    return (e, position) => {\n      this.onControlledDragUtil(e, position, index);\n      this.onStop();\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state.radius = 20;\n  }\n\n  render(props) {\n    return (\n      <div className=\"App\">\n        <button\n          onClick={() =>\n            this.setState({\n              ...this.state,\n              pureHTMLgraph: this.state.pureHTMLgraph ? false : true\n            })\n          }\n        >\n          <h2>Toggle graphics library (Pure HTML / Draw2D)</h2>\n        </button>\n        <TopBar\n          className=\"topbar\"\n          showControls={this.state.pureHTMLgraph}\n          defaultScale={this.state.scale * 100}\n          onChange={value => this.setState({ scale: value / 100 })}\n        />\n\n        {this.state.pureHTMLgraph ? (\n          <GraphicsAreaPureHTML\n            nodes={this.state.nodes}\n            connections={this.state.connections}\n            scale={this.state.scale}\n            onSetPostition={(index, position) =>\n              this.setPositionOnNode(index, position)\n            }\n          />\n        ) : (\n          <GraphicsAreaDraw2D className=\"graphicsarea\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}