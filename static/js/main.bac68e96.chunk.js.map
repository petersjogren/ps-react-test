{"version":3,"sources":["InitialState.js","websocketClientUtils.js","redux/actions/index.js","server.js","redux/reducers/index.js","components/NodeList.tsx","components/BezierCurve.tsx","components/InOutNode.tsx","components/GraphicsAreaPureHTML.tsx","components/CanvasDraw2D.js","App.js","components/TopBar.js","components/ServerGraph.js","serviceWorker.js","index.js"],"names":["invalidMousePosition","InitialState","stressTest","someIndexes","Array","keys","someNodes","map","index","nodeConfirmedInSessionWithID","title","id","uuidv4","position","x","Math","cos","length","y","sin","width","isSelected","inputPorts","name","type","outputPorts","someConnections","filter","a","confirmedInSessionWithID","from","nodeIndex","to","serverGraph","nodes","edges","currentSessionID","pureHTMLgraph","scale","isDragInProgress","dragPayload","dragMousePosition","nodeTemplates","connections","InitialStateStressTest","connection","messageInProgress","messageQueue","successFunctionForMessageInProgress","websocketClientSetup","window","WebSocket","MozWebSocket","console","log","onopen","onclose","store","dispatch","storeCurrentSessionIDAction","onerror","error","alert","onmessage","message","data","nextCommand","shift","successFunction","send","string","websocketSendCommand","readyState","CLOSED","push","CHANGE_ZOOM","POSITION_NODE","CREATE_NODE","POSITION_EVERY_OTHER_NODE","TOGGLE_GRAPHICS","RESET_NORMAL","RESET_STRESS_TEST","CONNECT_PORTS","DELETE_SELECTED","SELECT_NODE","SELECT_CONNECTION","SELECT_CLEAR","SET_NODE_TEMPLATE_LIST","SET_CURRENT_SESSIONID","CONFIRM_NODE","CONFIRM_CONNECTION","RECONNECT_SERVER","OUTPORT_DRAG_STARTED","DRAG_CANCELLED","INPORT_DROP","DRAG_MOUSE_POSITION","LOAD_STATE","DRAG_STOP","SET_GRAPH_FROM_SERVER","createNodeAction","nodeId","value","json","JSON","parse","sessionId","connectPortsAction","fromNodeIndex","fromPortIndex","toNodeIndex","toPortIndex","fromNodeId","toNodeId","sessionID","idsOnServer","Immutable","fromJS","connectionsOnServer","nodeDiffSinceLast","state","idArray","node","connectionArray","diff","toJS","payLoadTypeOutport","connectPorts","update","$push","clearDragState","$set","NodeList","newProps","this","props","templates","Fragment","onClick","onLoadDefault","onLoadOther","key","className","onCreateNode","draggable","onDragStart","e","payLoadString","stringify","templateIndex","dataTransfer","setData","substring","React","Component","BezierCurve","nextProps","isConfirmed","connectionIndex","curveColor","curveWidth","start","end","c1","c2","onSelectConnection","curve","onMouseDown","stopPropagation","fill","stroke","strokeDasharray","strokeWidth","d","rowHeight","portWidth","InPort","portIndex","onMouseUp","onInportDrop","OutPort","onOutportDragStarted","inPortRelativePosition","inPortIndex","outPortRelativePosition","outPortIndex","InOutNode","positionX","positionY","onDrag","onSelectNode","onDragStop","classes","onStop","handle","join","style","height","port","GraphicsAreaPureHTML","myRef","createRef","ref","onSelectClear","onDragCancelled","onMouseMove","area","current","rect","getBoundingClientRect","clientX","left","clientY","top","onDragMousePosition","onDragOver","preventDefault","onDrop","textData","getData","payLoad","targetElement","target","transform","fromNode","fromX","fromY","toX","toY","toNode","nodeProps","onSetPosition","connect","present","positionEveryOtherNodeAction","positionNodeAction","selectNodeAction","selectConnectionAction","outportDragStartedAction","inportDropAction","dragMousePositionAction","jQuery","$","require","file","draw2d","CanvasDraw2D","renderCanvas","canvasId","canvas","Canvas","shape","Start","End","add","c","Connection","setRouter","layout","SplineConnectionRouter","setSourceDecorator","decoration","BarDecorator","setTargetDecorator","DiamondDecorator","setSource","getOutputPort","setTarget","getInputPort","figure","analog","OpAmp","p1","basic","Polygon","p2","setBackgroundColor","setAlpha","setDimension","setCurrentSelection","Text","setText","lshape","Label","pie","diagram","Pie","setWidth","postit","note","PostIt","installEditor","ui","LabelInplaceEditor","setColor","setPadding","label","createConnection","sourcePort","targetPort","con","FanConnectionRouter","installEditPolicy","policy","WheelZoomPolicy","text","on","emitter","event","click","ev","io","Writer","marshal","fig","attr","svgs","setSVG","SVGFigure","Handle","Slider","dragging","restProps","prefixCls","overlay","visible","placement","showControls","min","max","onChange","events","select","options","hierarchical","color","ServerGraph","newPropsMap","n","equals","setInterval","onTimer","clearInterval","graph","reader","FileReader","App","document","body","addEventListener","deleteSelected","display","justifyContent","reconnect","onUndo","sizePast","onRedo","sizeFuture","input","createElement","onchange","files","readAsText","onload","readerEvent","content","result","onLoadStateFromString","stateString","blob","Blob","FileSaver","saveAs","sync","resetStateNormal","resetStateStressTest","toggleGraphicsLibrary","onZoomChange","past","future","ownProps","indexesForSelectedNodes","Set","i","forEach","has","deleteSelectedAction","percent","axios","get","then","response","currentSessionId","onfirmedInSessionWithID","syncAction","loadStateFromStringAction","ActionCreators","undo","redo","Boolean","location","hostname","match","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","logger","createLogger","collapsed","getState","action","createStore","undoable","newState","deltaX","deltaY","updateObject","oldSessionId","currentSession","connIdx","wasSomethingDeleted","wasConnectionDeleted","$splice","foundIndex","findNodeIndexWithId","connectionIndexes","ci","findConnectionIndexesWithIds","newValue","groupBy","groupByActionTypes","excludeAction","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bac68e96.chunk.js","sourcesContent":["import uuidv4 from \"uuid/v4\";\n\nexport const invalidMousePosition = 999999;\n\nfunction nodeTemplates() {\n  return [\n    {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Add\",\n      id: 213,\n      position: {\n        x: 186,\n        y: 7\n      },\n      isSelected: false,\n      width: 120,\n      inputPorts: [\n        { name: \"a\", type: \"int\" },\n        { name: \"b\", type: \"int\" }\n      ],\n      outputPorts: [{ name: \"sum\", type: \"int\" }]\n    },\n    {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Mult\",\n      id: 213,\n      position: {\n        x: 186,\n        y: 7\n      },\n      isSelected: false,\n      width: 180,\n      inputPorts: [\n        { name: \"x\", type: \"int\" },\n        { name: \"y\", type: \"int\" },\n        { name: \"z\", type: \"int\" }\n      ],\n      outputPorts: [{ name: \"sum\", type: \"int\" }]\n    },\n    {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Sub\",\n      id: 213,\n      position: {\n        x: 186,\n        y: 7\n      },\n      isSelected: false,\n      width: 100,\n      inputPorts: [\n        { name: \"x\", type: \"int\" },\n        { name: \"y\", type: \"int\" }\n      ],\n      outputPorts: [{ name: \"sum\", type: \"int\" }]\n    },\n    {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Div\",\n      id: 213,\n      position: {\n        x: 186,\n        y: 7\n      },\n      isSelected: false,\n      width: 120,\n      inputPorts: [\n        { name: \"x\", type: \"int\" },\n        { name: \"y\", type: \"int\" }\n      ],\n      outputPorts: [{ name: \"sum\", type: \"int\" }]\n    },\n    {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Add/Sub 4\",\n      id: 213,\n      position: {\n        x: 186,\n        y: 7\n      },\n      isSelected: false,\n      width: 120,\n      inputPorts: [\n        { name: \"x\", type: \"int\" },\n        { name: \"y\", type: \"int\" },\n        { name: \"z\", type: \"int\" },\n        { name: \"w\", type: \"int\" }\n      ],\n      outputPorts: [\n        { name: \"sum\", type: \"int\" },\n        { name: \"diff\", type: \"int\" }\n      ]\n    }\n  ];\n}\n\nfunction InitialStateStressTest() {\n  var someIndexes = [...Array(202).keys()];\n  var someNodes = someIndexes.map(index => {\n    return {\n      nodeConfirmedInSessionWithID: \"0\",\n      title: \"Add\",\n      id: uuidv4(),\n      position: {\n        x: 600 + 500 * Math.cos(((2 * 3.14) / someIndexes.length) * index),\n        y: 600 + 500 * Math.sin(((2 * 3.14) / someIndexes.length) * index)\n      },\n      width: 120,\n      isSelected: false,\n      inputPorts: [\n        { name: \"x\", type: \"int\" },\n        { name: \"y\", type: \"int\" }\n      ],\n      outputPorts: [{ name: \"sum\", type: \"int\" }]\n    };\n  });\n\n  var someConnections = someIndexes\n    .filter(a => a % 2 === 0)\n    .map(index => {\n      return {\n        confirmedInSessionWithID: \"0\",\n        isSelected: false,\n        from: {\n          nodeIndex: (index + someIndexes.length / 2 + 2) % someIndexes.length,\n          index: 0\n        },\n        to: {\n          nodeIndex: index,\n          index: 0\n        }\n      };\n    });\n\n  return {\n    serverGraph: {\n      nodes: [],\n      edges: []\n    },\n    currentSessionID: \"9999\",\n    pureHTMLgraph: true,\n    scale: 0.4,\n    stressTest: true,\n    isDragInProgress: false,\n    dragPayload: {},\n    dragMousePosition: { x: invalidMousePosition, y: invalidMousePosition },\n    nodeTemplates: nodeTemplates(),\n    nodes: [...someNodes],\n    connections: [...someConnections]\n  };\n}\n\nfunction InitialStateNormal() {\n  return {\n    serverGraph: {\n      nodes: [],\n      edges: []\n    },\n    currentSessionID: \"9999\",\n    pureHTMLgraph: true,\n    stressTest: false,\n    scale: 0.9,\n    isDragInProgress: false,\n    dragPayload: {},\n    dragMousePosition: { x: invalidMousePosition, y: invalidMousePosition },\n    nodeTemplates: nodeTemplates(),\n    nodes: [\n      {\n        nodeConfirmedInSessionWithID: \"c5e9a331-66b4-4461-8f3f-d319fa838195\",\n        title: \"Add\",\n        id: \"0523c8bf-d17e-49a5-918b-a91bca1b4ee9\",\n        position: {\n          x: 84.44444444444466,\n          y: 28.888888888889323\n        },\n        isSelected: false,\n        width: 120,\n        inputPorts: [\n          {\n            name: \"a\",\n            type: \"int\"\n          },\n          {\n            name: \"b\",\n            type: \"int\"\n          }\n        ],\n        outputPorts: [\n          {\n            name: \"sum\",\n            type: \"int\"\n          }\n        ]\n      },\n      {\n        nodeConfirmedInSessionWithID: \"c5e9a331-66b4-4461-8f3f-d319fa838195\",\n        title: \"Add\",\n        id: \"02bf0700-c984-452e-b3c2-82de39114955\",\n        position: {\n          x: 507.7777777777772,\n          y: 231.1111111111114\n        },\n        isSelected: false,\n        width: 120,\n        inputPorts: [\n          {\n            name: \"a\",\n            type: \"int\"\n          },\n          {\n            name: \"b\",\n            type: \"int\"\n          }\n        ],\n        outputPorts: [\n          {\n            name: \"sum\",\n            type: \"int\"\n          }\n        ]\n      },\n      {\n        nodeConfirmedInSessionWithID: \"c5e9a331-66b4-4461-8f3f-d319fa838195\",\n        title: \"Sub\",\n        id: \"44eeef82-abfe-4070-9f72-e854dd325991\",\n        position: {\n          x: 80.00000000000003,\n          y: 165.55555555555566\n        },\n        isSelected: false,\n        width: 100,\n        inputPorts: [\n          {\n            name: \"x\",\n            type: \"int\"\n          },\n          {\n            name: \"y\",\n            type: \"int\"\n          }\n        ],\n        outputPorts: [\n          {\n            name: \"sum\",\n            type: \"int\"\n          }\n        ]\n      },\n      {\n        nodeConfirmedInSessionWithID: \"c5e9a331-66b4-4461-8f3f-d319fa838195\",\n        title: \"Add/Sub 4\",\n        id: \"3c753071-65f6-4fbe-9bf1-2d861c6186ca\",\n        position: {\n          x: 293.33333333333286,\n          y: 231.11111111111128\n        },\n        isSelected: false,\n        width: 120,\n        inputPorts: [\n          {\n            name: \"x\",\n            type: \"int\"\n          },\n          {\n            name: \"y\",\n            type: \"int\"\n          },\n          {\n            name: \"z\",\n            type: \"int\"\n          },\n          {\n            name: \"w\",\n            type: \"int\"\n          }\n        ],\n        outputPorts: [\n          {\n            name: \"sum\",\n            type: \"int\"\n          },\n          {\n            name: \"diff\",\n            type: \"int\"\n          }\n        ]\n      },\n      {\n        nodeConfirmedInSessionWithID: \"c5e9a331-66b4-4461-8f3f-d319fa838195\",\n        title: \"Mult\",\n        id: \"0da44ac8-acab-47cd-b195-29e11008c869\",\n        position: {\n          x: 435.5555555555551,\n          y: 73.33333333333347\n        },\n        isSelected: false,\n        width: 180,\n        inputPorts: [\n          {\n            name: \"x\",\n            type: \"int\"\n          },\n          {\n            name: \"y\",\n            type: \"int\"\n          },\n          {\n            name: \"z\",\n            type: \"int\"\n          }\n        ],\n        outputPorts: [\n          {\n            name: \"sum\",\n            type: \"int\"\n          }\n        ]\n      }\n    ],\n    connections: [\n      {\n        confirmedInSessionWithID: \"0\",\n        isSelected: false,\n        from: {\n          nodeIndex: 3,\n          index: 0\n        },\n        to: {\n          nodeIndex: 1,\n          index: 0\n        }\n      },\n      {\n        confirmedInSessionWithID: \"0\",\n        isSelected: false,\n        from: {\n          nodeIndex: 2,\n          index: 0\n        },\n        to: {\n          nodeIndex: 3,\n          index: 1\n        }\n      },\n      {\n        confirmedInSessionWithID: \"0\",\n        isSelected: false,\n        from: {\n          nodeIndex: 0,\n          index: 0\n        },\n        to: {\n          nodeIndex: 4,\n          index: 1\n        }\n      },\n      {\n        confirmedInSessionWithID: \"0\",\n        isSelected: false,\n        from: {\n          nodeIndex: 2,\n          index: 0\n        },\n        to: {\n          nodeIndex: 4,\n          index: 2\n        }\n      }\n    ]\n  };\n}\n\nexport default function InitialState(stressTest) {\n  if (stressTest) {\n    return InitialStateStressTest();\n  } else {\n    return InitialStateNormal();\n  }\n}\n","import { store } from \"./index.js\";\nimport { storeCurrentSessionIDAction } from \"./redux/actions\";\n\nvar connection;\nvar messageInProgress = false;\nvar messageQueue = [];\nvar successFunctionForMessageInProgress = null;\n\nexport function websocketClientSetup() {\n  // if user is running mozilla then use it's built-in WebSocket\n  window.WebSocket = window.WebSocket || window.MozWebSocket;\n\n  connection = new WebSocket(\"ws://127.0.0.1:1337\");\n  console.log(\"websocket connection\", connection);\n\n  connection.onopen = function() {\n    // connection is opened and ready to use\n  };\n\n  connection.onclose = function() {\n    console.log(\"Connection closed\");\n    store.dispatch(storeCurrentSessionIDAction(\"\"));\n  };\n\n  connection.onerror = function(error) {\n    // an error occurred when sending/receiving data\n    window.alert(\n      'Websocket test server not started: start with \"node websocket-test-server.js\"',\n      error.type\n    );\n  };\n\n  connection.onmessage = function(message) {\n    console.log(\"sessionID: \" + message.data);\n    store.dispatch(storeCurrentSessionIDAction(message.data));\n\n    // Reset onmessage handler to handle response messages\n    connection.onmessage = function(message) {\n      if (messageInProgress) {\n        successFunctionForMessageInProgress(message);\n        if (messageQueue.length > 0) {\n          var nextCommand = messageQueue[0];\n          messageQueue.shift();\n          successFunctionForMessageInProgress = nextCommand.successFunction;\n          connection.send(nextCommand.string);\n        } else {\n          messageInProgress = false;\n        }\n      }\n    };\n  };\n}\n\nexport function websocketSendCommand(string, successFunction) {\n  if (connection.readyState !== WebSocket.CLOSED) {\n    if (messageInProgress) {\n      messageQueue.push({\n        string,\n        successFunction\n      });\n    } else {\n      successFunctionForMessageInProgress = successFunction;\n      connection.send(string);\n      messageInProgress = true;\n    }\n  } else {\n    return \"Error\";\n  }\n}\n","import axios from \"axios\";\nimport {\n  websocketSendCommand,\n  websocketClientSetup\n} from \"../../websocketClientUtils\";\nimport uuidv4 from \"uuid/v4\";\nimport { payLoadTypeOutport } from \"../reducers\";\n\nexport const CHANGE_ZOOM = \"CHANGE_ZOOM\";\nexport const POSITION_NODE = \"POSITION_NODE\";\nexport const CREATE_NODE = \"CREATE_NODE\";\nexport const POSITION_EVERY_OTHER_NODE = \"POSITION_EVERY_OTHER_NODE\";\nexport const TOGGLE_GRAPHICS = \"TOGGLE_GRAPHICS\";\nexport const RESET_NORMAL = \"RESET_NORMAL\";\nexport const RESET_STRESS_TEST = \"RESET_STRESS_TEST\";\nexport const CONNECT_PORTS = \"CONNECT_PORTS\";\nexport const DELETE_SELECTED = \"DELETE_SELECTED\";\nexport const SELECT_NODE = \"SELECT_NODE\";\nexport const SELECT_CONNECTION = \"SELECT_CONNECTION\";\nexport const SELECT_CLEAR = \"SELECT_CLEAR\";\nexport const SET_NODE_TEMPLATE_LIST = \"SET_NODE_TEMPLATE_LIST\";\nexport const SET_CURRENT_SESSIONID = \"SET_CURRENT_SESSIONID\";\nexport const CONFIRM_NODE = \"CONFIRM_NODE\";\nexport const CONFIRM_CONNECTION = \"CONFIRM_CONNECTION\";\nexport const RECONNECT_SERVER = \"RECONNECT_SERVER\";\nexport const OUTPORT_DRAG_STARTED = \"OUTPORT_DRAG_STARTED\";\nexport const DRAG_CANCELLED = \"DRAG_CANCELLED\";\nexport const INPORT_DROP = \"INPORT_DROP\";\nexport const DRAG_MOUSE_POSITION = \"DRAG_MOUSE_POSITION\";\nexport const LOAD_STATE = \"LOAD_STATE\";\nexport const DRAG_STOP = \"DRAG_STOP\";\nexport const SET_GRAPH_FROM_SERVER = \"SET_GRAPH_FROM_SERVER\";\n\nexport const getGraphJSONFromServerAction = () => dispatch => {\n  websocketSendCommand(\"getgraph\", value => {\n    console.log(\"answer\", value);\n    var json = JSON.parse(value.data);\n    console.log(\"Response\", json.type, json.graph);\n    dispatch({\n      type: SET_GRAPH_FROM_SERVER,\n      graph: json.graph\n    });\n  });\n};\n\nexport const zoomAction = percent => ({\n  type: CHANGE_ZOOM,\n  percent\n});\n\nexport const deleteSelectedAction = state => dispatch => {\n  // Send commands to server to remove selected nodes and connections\n  var indexesForSelectedNodes = new Set(\n    state.nodes.map((n, i) => (n.isSelected ? i : -1)).filter(i => i !== -1)\n  );\n  // Tell server to delete selected connections\n  state.connections.forEach(c => {\n    if (\n      c.isSelected ||\n      indexesForSelectedNodes.has(c.from.nodeIndex) ||\n      indexesForSelectedNodes.has(c.to.nodeIndex)\n    ) {\n      websocketSendCommand(\n        \"deleteconnection;\" +\n          state.nodes[c.from.nodeIndex].id +\n          \";\" +\n          state.nodes[c.to.nodeIndex].id,\n        value => {\n          console.log(\"answer\", value);\n          var json = JSON.parse(value.data);\n          console.log(\"Response\", json.type, json.nodeId, json.sessionId);\n        }\n      );\n    }\n  });\n  // Tell server to delete selected nodes\n  state.nodes.forEach(n => {\n    if (n.isSelected) {\n      websocketSendCommand(\"deletenode;\" + n.id, value => {\n        console.log(\"answer\", value);\n        var json = JSON.parse(value.data);\n        console.log(\"Response\", json.type, json.nodeId, json.sessionId);\n      });\n    }\n  });\n\n  dispatch({\n    type: DELETE_SELECTED\n  });\n};\n\nexport const createNodeAction = (x, y, index, title) => dispatch => {\n  var nodeId = uuidv4();\n  dispatch({\n    type: CREATE_NODE,\n    x,\n    y,\n    index,\n    nodeId\n  });\n  websocketSendCommand(\"addnode;\" + nodeId + \";\" + title, value => {\n    console.log(\"answer\", value);\n    var json = JSON.parse(value.data);\n    console.log(\"Response\", json.type, json.nodeId, json.sessionId);\n    dispatch({\n      type: CONFIRM_NODE,\n      nodeId: json.nodeId,\n      sessionId: json.sessionId\n    });\n  });\n};\n\nexport const selectNodeAction = nodeIndex => ({\n  type: SELECT_NODE,\n  nodeIndex\n});\n\nexport const outportDragStartedAction = (nodeIndex, portIndex) => ({\n  type: OUTPORT_DRAG_STARTED,\n  nodeIndex,\n  portIndex\n});\n\nexport const inportDropAction = (\n  nodeIndex,\n  portIndex,\n  isDragInProgress,\n  dragPayload,\n  fromNodeId,\n  toNodeId\n) => dispatch => {\n  if (isDragInProgress && dragPayload.type === payLoadTypeOutport) {\n    dispatch({ type: DRAG_CANCELLED });\n    dispatch(\n      connectPortsAction(\n        dragPayload.nodeIndex,\n        dragPayload.portIndex,\n        nodeIndex,\n        portIndex,\n        fromNodeId,\n        toNodeId\n      )\n    );\n  }\n};\n\nexport const dragMousePositionAction = (x, y) => ({\n  type: DRAG_MOUSE_POSITION,\n  x,\n  y\n});\n\nexport const dragCancelledAction = () => ({\n  type: DRAG_CANCELLED\n});\n\n// This action exists for breaking POSITION_NODE grouping\n// when user ends drag operations. Otherwise all consecutive\n// drag operations will become one undo step.\nexport const dragStopAction = () => ({\n  type: DRAG_STOP\n});\n\nexport const selectClearAction = () => ({\n  type: SELECT_CLEAR\n});\n\nexport const selectConnectionAction = connectionIndex => ({\n  type: SELECT_CONNECTION,\n  connectionIndex\n});\n\nexport const positionNodeAction = (index, position) => ({\n  type: POSITION_NODE,\n  index,\n  position\n});\n\nexport const positionEveryOtherNodeAction = (index, position) => ({\n  type: POSITION_EVERY_OTHER_NODE,\n  index,\n  position\n});\n\nexport const toggleGraphicsLibraryAction = () => ({\n  type: TOGGLE_GRAPHICS\n});\n\nexport const resetStateNormalAction = () => ({\n  type: RESET_NORMAL\n});\n\nexport const resetStateStressTestAction = () => ({\n  type: RESET_STRESS_TEST\n});\n\nexport const connectPortsAction = (\n  fromNodeIndex,\n  fromPortIndex,\n  toNodeIndex,\n  toPortIndex,\n  fromNodeId,\n  toNodeId\n) => dispatch => {\n  dispatch({\n    type: CONNECT_PORTS,\n    fromNodeIndex,\n    fromPortIndex,\n    toNodeIndex,\n    toPortIndex\n  });\n\n  websocketSendCommand(\n    \"addconnection;\" +\n      fromNodeId +\n      \";\" +\n      fromPortIndex +\n      \";\" +\n      toNodeId +\n      \";\" +\n      toPortIndex,\n    value => {\n      console.log(\"answer\", value);\n      var json = JSON.parse(value.data);\n      console.log(\"Response\", json);\n      dispatch({\n        type: CONFIRM_CONNECTION,\n        fromNodeId: json.fromNodeId,\n        toNodeId: json.toNodeId,\n        sessionId: json.sessionId\n      });\n    }\n  );\n};\n\nexport const loadDefaultNodeTemplatesAsyncAction = () => dispatch => {\n  console.log(\"loadDefaultNodeTemplatesAsyncAction\");\n  axios.get(\"templates/defaultNodes.json\").then(response => {\n    console.log(response);\n    dispatch({\n      type: SET_NODE_TEMPLATE_LIST,\n      data: response.data\n    });\n  });\n};\n\nexport const loadOtherNodeTemplatesAsyncAction = () => dispatch => {\n  console.log(\"loadOtherNodeTemplatesAsyncAction\");\n  axios.get(\"templates/otherNodes.json\").then(response => {\n    console.log(response);\n    dispatch({\n      type: SET_NODE_TEMPLATE_LIST,\n      data: response.data\n    });\n  });\n};\n\nexport const storeCurrentSessionIDAction = sessionID => {\n  console.log(\"set sessionID action\", sessionID);\n  return {\n    type: SET_CURRENT_SESSIONID,\n    id: sessionID\n  };\n};\n\nexport const reconnectAction = () => {\n  console.log(\"reconnectAction\");\n  websocketClientSetup();\n  return {\n    type: RECONNECT_SERVER\n  };\n};\n\n// Add unconfirmed nodes to server\nexport const syncAction = (\n  currentSessionId,\n  nodes,\n  connections\n) => dispatch => {\n  // Filter out the nodes that are not confirmed in the current session adn add them to server\n  var missingNodes = nodes.filter(node => {\n    return node.nodeConfirmedInSessionWithID !== currentSessionId;\n  });\n  missingNodes.forEach(node => {\n    websocketSendCommand(\"addnode;\" + node.id + \";\" + node.title, value => {\n      console.log(\"answer\", value);\n      var json = JSON.parse(value.data);\n      console.log(\"Response\", json.type, json.nodeId, json.sessionId);\n      dispatch({\n        type: CONFIRM_NODE,\n        nodeId: json.nodeId,\n        sessionId: json.sessionId\n      });\n    });\n  });\n\n  // Filter out the nodes that are not confirmed in the current session adn add them to server\n  var missingConnections = connections.filter(c => {\n    return c.onfirmedInSessionWithID !== currentSessionId;\n  });\n  missingConnections.forEach(c => {\n    websocketSendCommand(\n      \"addconnection;\" +\n        nodes[c.from.nodeIndex].id +\n        \";\" +\n        c.from.portIndex +\n        \";\" +\n        nodes[c.to.nodeIndex].id +\n        \";\" +\n        c.to.portIndex,\n      value => {\n        console.log(\"answer\", value);\n        var json = JSON.parse(value.data);\n        console.log(\"Response\", json);\n        dispatch({\n          type: CONFIRM_CONNECTION,\n          fromNodeId: json.fromNodeId,\n          toNodeId: json.toNodeId,\n          sessionId: json.sessionId\n        });\n      }\n    );\n  });\n};\n\nexport const loadStateFromStringAction = string => ({\n  type: LOAD_STATE,\n  data: string\n});\n","import Immutable from \"immutable\";\nimport diff from \"immutablediff\";\n\nvar idsOnServer = Immutable.fromJS([]);\nvar connectionsOnServer = Immutable.fromJS([]);\n\nexport function nodeDiffSinceLast(state) {\n  var idArray = Immutable.fromJS(state.nodes.map(node => node.id));\n  var connectionArray = Immutable.fromJS(state.connections);\n\n  console.log(\"node diff\", diff(idsOnServer, idArray).toJS());\n  console.log(\n    \"connection diff\",\n    diff(connectionsOnServer, connectionArray).toJS()\n  );\n  idsOnServer = idArray;\n  connectionsOnServer = connectionArray;\n}\n","import InitialState from \"../../InitialState\";\nimport update from \"immutability-helper\";\nimport {\n  CHANGE_ZOOM,\n  DELETE_SELECTED,\n  SELECT_NODE,\n  SELECT_CONNECTION,\n  SELECT_CLEAR,\n  POSITION_NODE,\n  POSITION_EVERY_OTHER_NODE,\n  TOGGLE_GRAPHICS,\n  RESET_NORMAL,\n  RESET_STRESS_TEST,\n  CONNECT_PORTS,\n  CREATE_NODE,\n  SET_NODE_TEMPLATE_LIST,\n  SET_CURRENT_SESSIONID,\n  CONFIRM_NODE,\n  CONFIRM_CONNECTION,\n  RECONNECT_SERVER,\n  OUTPORT_DRAG_STARTED,\n  DRAG_CANCELLED,\n  INPORT_DROP,\n  DRAG_MOUSE_POSITION,\n  LOAD_STATE,\n  DRAG_STOP,\n  SET_GRAPH_FROM_SERVER\n} from \"../actions\";\nimport { invalidMousePosition } from \"../../InitialState\";\nimport { nodeDiffSinceLast } from \"../../server\";\n\nexport const payLoadTypeOutport = \"FROM_OUTPORT\";\n\nfunction findNodeIndexWithId(state, id) {\n  var foundIndex = -1;\n  state.nodes.forEach((value, index) => {\n    if (value.id === id) {\n      foundIndex = index;\n    }\n  });\n  return foundIndex;\n}\n\nfunction findConnectionIndexesWithIds(state, fromNodeId, toNodeId) {\n  var indexes = state.connections\n    .map((c, ci) =>\n      state.nodes[c.from.nodeIndex].id === fromNodeId &&\n      state.nodes[c.to.nodeIndex].id === toNodeId\n        ? ci\n        : -1\n    )\n    .filter(i => i !== -1);\n  return indexes;\n}\n\nfunction connectPorts(\n  state,\n  fromNodeIndex,\n  fromPortIndex,\n  toNodeIndex,\n  toPortIndex\n) {\n  return update(state, {\n    connections: {\n      $push: [\n        {\n          isSelected: false,\n          from: {\n            nodeIndex: fromNodeIndex,\n            index: fromPortIndex\n          },\n          to: {\n            nodeIndex: toNodeIndex,\n            index: toPortIndex\n          }\n        }\n      ]\n    }\n  });\n}\n\nfunction clearDragState(state) {\n  return update(state, {\n    isDragInProgress: {\n      $set: false\n    },\n    dragMousePosition: {\n      x: { $set: invalidMousePosition },\n      y: { $set: invalidMousePosition }\n    },\n    dragPayload: { $set: {} }\n  });\n}\n\nexport default function graphEditorReducer(\n  state = InitialState(false),\n  action\n) {\n  //  console.log(\"graphEditorReducer\", action);\n  var newState;\n  //  console.log(\"state before \", state);\n  var deltaX;\n  var deltaY;\n  var updateObject;\n  var oldSessionId;\n\n  switch (action.type) {\n    case LOAD_STATE:\n      var currentSession = state.currentSessionID;\n      newState = JSON.parse(action.data);\n      newState = update(newState, {\n        currentSessionID: { $set: currentSession }\n      });\n      break;\n    case CHANGE_ZOOM:\n      newState = update(state, { scale: { $set: action.percent / 100 } });\n      break;\n    case DELETE_SELECTED:\n      console.log(\"DELETE_SELECTED\");\n      newState = state;\n      // Delete all selected nodes and all selected connections.\n      // Remember to also delete all connections that goes from or to a deleted node.\n      // Also remember to update all indexes of connections to the new node indexes.\n      var i;\n      var connIdx;\n      var wasSomethingDeleted;\n      var wasConnectionDeleted;\n\n      // Delete selected nodes\n      wasSomethingDeleted = true;\n      while (wasSomethingDeleted) {\n        wasSomethingDeleted = false;\n        for (i = 0; i < newState.nodes.length; i++) {\n          if (newState.nodes[i].isSelected) {\n            // Delete at a specific index, no matter what value is in it\n            newState = update(newState, { nodes: { $splice: [[i, 1]] } });\n\n            // Remove connections to/from the deleted node\n            wasConnectionDeleted = true;\n            while (wasConnectionDeleted) {\n              wasConnectionDeleted = false;\n              for (\n                connIdx = 0;\n                connIdx < newState.connections.length;\n                connIdx++\n              ) {\n                if (\n                  newState.connections[connIdx].from.nodeIndex === i ||\n                  newState.connections[connIdx].to.nodeIndex === i\n                ) {\n                  newState = update(newState, {\n                    connections: { $splice: [[connIdx, 1]] }\n                  });\n                  wasConnectionDeleted = true;\n                  break;\n                }\n              }\n            }\n\n            // Decrement node indexes in connections by one if > i\n            updateObject = {};\n            // eslint-disable-next-line\n            newState.connections.map((value, index) => {\n              updateObject[index] = {\n                to: {\n                  nodeIndex: {\n                    $set:\n                      value.to.nodeIndex > i\n                        ? value.to.nodeIndex - 1\n                        : value.to.nodeIndex\n                  }\n                },\n                from: {\n                  nodeIndex: {\n                    $set:\n                      value.from.nodeIndex > i\n                        ? value.from.nodeIndex - 1\n                        : value.from.nodeIndex\n                  }\n                }\n              };\n              return null;\n            });\n            newState = update(newState, {\n              connections: {\n                ...updateObject\n              }\n            });\n\n            wasSomethingDeleted = true;\n            break;\n          }\n        }\n      }\n\n      // Delete selected connections\n      wasSomethingDeleted = true;\n      while (wasSomethingDeleted) {\n        wasSomethingDeleted = false;\n        for (i = 0; i < newState.connections.length; i++) {\n          if (newState.connections[i].isSelected) {\n            // Delete at a specific index, no matter what value is in it\n            newState = update(newState, { connections: { $splice: [[i, 1]] } });\n            wasSomethingDeleted = true;\n            break;\n          }\n        }\n      }\n      nodeDiffSinceLast(newState);\n      break;\n    case SELECT_NODE:\n      console.log(\"SELECT_NODE\", action.nodeIndex, state);\n      newState = update(state, {\n        nodes: {\n          [action.nodeIndex]: {\n            isSelected: { $set: true }\n          }\n        }\n      });\n      break;\n    case CREATE_NODE:\n      console.log(\"CREATE_NODE\", action.x, action.y, action);\n      newState = update(state, {\n        nodes: { $push: [state.nodeTemplates[action.index]] }\n      });\n      newState = update(newState, {\n        nodes: {\n          [newState.nodes.length - 1]: {\n            position: {\n              x: {\n                $set: action.x - state.nodeTemplates[action.index].width / 2\n              },\n              y: { $set: action.y - 10 }\n            },\n            id: { $set: action.nodeId }\n          }\n        }\n      });\n      console.log(\"state after \", newState);\n      nodeDiffSinceLast(newState);\n      break;\n    case DRAG_STOP:\n      newState = state;\n      break;\n    case CONFIRM_NODE:\n      console.log(\"CONFIRM_NODE\", action.nodeId, action.sessionId, action);\n      var nodeIndex = findNodeIndexWithId(state, action.nodeId);\n      console.log(\"nodeIndex\", nodeIndex);\n      newState = update(state, {\n        currentSessionID: { $set: action.sessionId },\n        nodes: {\n          [nodeIndex]: {\n            nodeConfirmedInSessionWithID: { $set: action.sessionId }\n          }\n        }\n      });\n      break;\n    case CONFIRM_CONNECTION:\n      console.log(\"CONFIRM_CONNECTION\", action.sessionId, action);\n      newState = state;\n      var connectionIndexes = findConnectionIndexesWithIds(\n        state,\n        action.fromNodeId,\n        action.toNodeId\n      );\n      console.log(\"connectionIndexes\", connectionIndexes);\n      connectionIndexes.forEach(ci => {\n        newState = update(newState, {\n          currentSessionID: { $set: action.sessionId },\n          connections: {\n            [ci]: {\n              confirmedInSessionWithID: { $set: action.sessionId }\n            }\n          }\n        });\n      });\n      break;\n    case OUTPORT_DRAG_STARTED:\n      console.log(\"OUTPORT_DRAG_STARTED\", action.nodeIndex, action.portIndex);\n      newState = update(state, {\n        isDragInProgress: {\n          $set: true\n        },\n        dragPayload: {\n          $set: {\n            type: payLoadTypeOutport,\n            nodeIndex: action.nodeIndex,\n            portIndex: action.portIndex\n          }\n        }\n      });\n      break;\n    case INPORT_DROP:\n      console.log(\"INPORT_DROP\", action.nodeIndex, action.portIndex);\n      newState = state;\n      if (\n        state.isDragInProgress &&\n        state.dragPayload.type === payLoadTypeOutport\n      ) {\n        newState = connectPorts(\n          newState,\n          state.dragPayload.nodeIndex,\n          state.dragPayload.portIndex,\n          action.nodeIndex,\n          action.portIndex\n        );\n      }\n      newState = clearDragState(newState);\n      nodeDiffSinceLast(newState);\n      break;\n    case DRAG_CANCELLED:\n      // console.log(\"DRAG_CANCELLED\");\n      newState = clearDragState(state);\n      break;\n    case DRAG_MOUSE_POSITION:\n      // console.log(\"DRAG_MOUSE_POSITION\", action.x, action.y);\n      newState = update(state, {\n        dragMousePosition: {\n          x: { $set: action.x },\n          y: { $set: action.y }\n        }\n      });\n      break;\n    case SELECT_CONNECTION:\n      // console.log(\"SELECT_CONNECTION\", action.connectionIndex);\n      newState = update(state, {\n        connections: {\n          [action.connectionIndex]: {\n            isSelected: { $set: true }\n          }\n        }\n      });\n      break;\n    case SELECT_CLEAR:\n      // console.log(\"SELECT_CLEAR\");\n      updateObject = {};\n      state.nodes.map((value, index) => {\n        updateObject[index] = {\n          isSelected: { $set: false }\n        };\n        return null;\n      });\n      newState = update(state, {\n        nodes: {\n          ...updateObject\n        }\n      });\n\n      updateObject = {};\n      state.connections.map((value, index) => {\n        updateObject[index] = {\n          isSelected: { $set: false }\n        };\n        return null;\n      });\n      newState = update(newState, {\n        connections: {\n          ...updateObject\n        }\n      });\n      break;\n    case POSITION_NODE:\n      newState = update(state, {\n        nodes: {\n          [action.index]: {\n            position: {\n              x: { $set: action.position.x },\n              y: { $set: action.position.y }\n            }\n          }\n        }\n      });\n      break;\n    case POSITION_EVERY_OTHER_NODE:\n      deltaX = action.position.x - state.nodes[action.index].position.x;\n      deltaY = action.position.y - state.nodes[action.index].position.y;\n      updateObject = {};\n      state.nodes.map((value, index) => {\n        if (index % 2 === 0) {\n          updateObject[index] = {\n            position: {\n              x: { $set: state.nodes[index].position.x + deltaX },\n              y: { $set: state.nodes[index].position.y + deltaY }\n            }\n          };\n        }\n        return null;\n      });\n      newState = update(state, {\n        nodes: {\n          [action.index]: {\n            position: {\n              x: { $set: action.position.x },\n              y: { $set: action.position.y }\n            }\n          },\n          ...updateObject\n        }\n      });\n      break;\n    case TOGGLE_GRAPHICS:\n      var newValue = state.pureHTMLgraph ? false : true;\n      newState = update(state, {\n        pureHTMLgraph: { $set: newValue }\n      });\n      break;\n    case RESET_NORMAL:\n      oldSessionId = state.currentSessionID;\n      newState = InitialState(false);\n      newState = update(newState, {\n        currentSessionID: { $set: oldSessionId }\n      });\n      break;\n    case RESET_STRESS_TEST:\n      oldSessionId = state.currentSessionID;\n      newState = InitialState(true);\n      newState = update(newState, {\n        currentSessionID: { $set: oldSessionId }\n      });\n      break;\n    case CONNECT_PORTS:\n      console.log(\"CONNECT_PORTS reducer\");\n      newState = connectPorts(\n        state,\n        action.fromNodeIndex,\n        action.fromPortIndex,\n        action.toNodeIndex,\n        action.toPortIndex\n      );\n      newState = clearDragState(newState);\n      break;\n    case SET_NODE_TEMPLATE_LIST:\n      console.log(\"SET_NODE_TEMPLATE_LIST\");\n      newState = update(state, {\n        nodeTemplates: { $set: action.data.nodeTemplates }\n      });\n      break;\n    case SET_CURRENT_SESSIONID:\n      console.log(\"SET_CURRENT_SESSIONID\", action);\n      newState = update(state, {\n        currentSessionID: { $set: action.id }\n      });\n      break;\n    case RECONNECT_SERVER:\n      // Connection was reset in action creator\n      newState = update(state, {\n        serverGraph: { nodes: { $set: [] }, edges: { $set: [] } }\n      });\n      break;\n    case SET_GRAPH_FROM_SERVER:\n      newState = newState = update(state, {\n        serverGraph: { $set: action.graph }\n      });\n      break;\n    default:\n      console.log(\"default \", state);\n      newState = state;\n      break;\n  }\n\n  //  console.log(\"newState  \", newState);\n  return newState;\n}\n","import React from \"react\";\n\ninterface Template {\n  title: string;\n}\n\ninterface Props {\n  templates: Template[];\n  onLoadDefault: () => void;\n  onLoadOther: () => void;\n  onCreateNode: (index: number, title: string) => void;\n}\n\nexport class NodeList extends React.Component<Props, object> {\n  shouldComponentUpdate(newProps: Props) {\n    if (this.props.templates.length !== newProps.templates.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button onClick={this.props.onLoadDefault}>Load default</button>\n        <button onClick={this.props.onLoadOther}>Load many</button>\n        {this.props.templates.map((value, index) => {\n          return (\n            <div\n              key={index}\n              className=\"nodelistitem\"\n              onClick={() => this.props.onCreateNode(index, value.title)}\n              draggable\n              onDragStart={e => {\n                //console.log(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n\n                var payLoadString = JSON.stringify({\n                  type: \"CREATE_NODE\",\n                  templateIndex: index,\n                  title: value.title\n                });\n                console.log(\"drag start\", payLoadString);\n                e.dataTransfer.setData(\"text/plain\", payLoadString);\n              }}\n            >\n              {value.title.substring(0, 20)}\n            </div>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\ninterface Pos {\n  x: number;\n  y: number;\n}\n\ninterface Props {\n  connectionIndex: number;\n  isSelected: boolean;\n  isConfirmed: boolean;\n  curveColor: string;\n  curveWidth: number;\n  start: Pos;\n  end: Pos;\n  c1: Pos;\n  c2: Pos;\n  onSelectConnection: (connectionIndex: number) => void;\n}\n\nexport default class BezierCurve extends React.Component<Props, object> {\n  shouldComponentUpdate(nextProps: Props) {\n    const {\n      isSelected,\n      isConfirmed,\n      connectionIndex,\n      curveColor,\n      curveWidth,\n      start,\n      end,\n      c1,\n      c2\n    } = this.props;\n    return (\n      nextProps.connectionIndex !== connectionIndex ||\n      nextProps.isSelected !== isSelected ||\n      nextProps.isConfirmed !== isConfirmed ||\n      nextProps.curveColor !== curveColor ||\n      nextProps.curveWidth !== curveWidth ||\n      nextProps.start.x !== start.x ||\n      nextProps.start.y !== start.y ||\n      nextProps.end.x !== end.x ||\n      nextProps.end.y !== end.y ||\n      nextProps.c1.x !== c1.x ||\n      nextProps.c1.y !== c1.y ||\n      nextProps.c2.x !== c2.x ||\n      nextProps.c2.y !== c2.y\n    );\n  }\n\n  render() {\n    const {\n      isSelected,\n      isConfirmed,\n      connectionIndex,\n      curveColor,\n      curveWidth,\n      start,\n      end,\n      c1,\n      c2,\n      onSelectConnection\n    } = this.props;\n    const curve = `M${start.x},${start.y} C${c1.x},${c1.y} ${c2.x},${c2.y} ${end.x},${end.y}`;\n\n    return (\n      <path\n        onMouseDown={e => {\n          e.stopPropagation();\n          console.log(\"BezierCurve click\");\n          onSelectConnection(connectionIndex);\n        }}\n        fill=\"none\"\n        stroke={isConfirmed ? curveColor : \"red\"}\n        strokeDasharray={isSelected ? 4 : 0}\n        strokeWidth={curveWidth}\n        d={curve}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Draggable, { DraggableEventHandler } from \"react-draggable\";\nimport \"./InOutNode.css\";\n\nvar rowHeight = 16;\nvar portWidth = 15;\n\ninterface InPortProps {\n  name: string;\n  nodeIndex: number;\n  portIndex: number;\n  onInportDrop: (nodeIndex: number, portIndex: number) => void;\n}\n\nfunction InPort(props: InPortProps) {\n  const { name, nodeIndex, portIndex } = props;\n  return (\n    <div className=\"port_area in\">\n      <div\n        className=\"port noselect\"\n        // ??? Add onTouchUp onTouchMove onTouchDown that do the same things to support phones.\n        onMouseUp={e => {\n          e.stopPropagation();\n          console.log(\"mouse up in in port\");\n          props.onInportDrop(nodeIndex, portIndex);\n        }}\n      >\n        →\n      </div>\n      <header className=\"porttext in noselect\">{name}</header>\n      <div className=\"noport noselect\"></div>\n    </div>\n  );\n}\n\ninterface OutPortProps {\n  name: string;\n  nodeIndex: number;\n  portIndex: number;\n  onOutportDragStarted: () => void;\n}\n\nfunction OutPort(props: OutPortProps) {\n  const { name } = props;\n  return (\n    <div className=\"port_area out\">\n      <div className=\"noport noselect\"></div>\n      <header className=\"porttext out noselect\">{name}</header>\n      <div\n        className=\"port noselect\"\n        onMouseDown={e => {\n          console.log(\"outport onmousedown. Begin out port drag\");\n          props.onOutportDragStarted();\n        }}\n      >\n        →\n      </div>\n    </div>\n  );\n}\n\nexport function inPortRelativePosition(node: any, inPortIndex: number) {\n  return {\n    x: portWidth / 2,\n    y: rowHeight + rowHeight * inPortIndex + rowHeight / 2\n  };\n}\n\nexport function outPortRelativePosition(node: any, outPortIndex: number) {\n  return {\n    x: node.width - portWidth / 2,\n    y:\n      rowHeight +\n      node.inputPorts.length * rowHeight +\n      outPortIndex * rowHeight +\n      rowHeight / 2\n  };\n}\n\nexport interface InOutNodeProps {\n  title: string;\n  nodeIndex: number;\n  scale: number;\n  positionX: number;\n  positionY: number;\n  width: number;\n  isSelected: boolean;\n  currentSessionID: string;\n  nodeConfirmedInSessionWithID: string;\n  inputPorts: any[];\n  outputPorts: any[];\n  onDrag: DraggableEventHandler;\n  onSelectNode: (nodeIndex: number) => void;\n  onOutportDragStarted: (nodeIndex: number, portIndex: number) => void;\n  onInportDrop: (nodeIndex: number, portIndex: number) => void;\n  onDragStop: () => void;\n}\n\nexport class InOutNode extends React.Component<InOutNodeProps, {}> {\n  shouldComponentUpdate(nextProps: InOutNodeProps) {\n    const {\n      nodeIndex,\n      scale,\n      positionX,\n      positionY,\n      width,\n      isSelected,\n      currentSessionID,\n      nodeConfirmedInSessionWithID\n    } = this.props;\n    return (\n      nextProps.nodeIndex !== nodeIndex ||\n      nextProps.currentSessionID !== currentSessionID ||\n      nextProps.scale !== scale ||\n      nextProps.nodeConfirmedInSessionWithID !== nodeConfirmedInSessionWithID ||\n      nextProps.positionX !== positionX ||\n      nextProps.positionY !== positionY ||\n      nextProps.width !== width ||\n      nextProps.isSelected !== isSelected\n    );\n  }\n\n  render() {\n    const {\n      title,\n      nodeIndex,\n      currentSessionID,\n      nodeConfirmedInSessionWithID,\n      scale,\n      positionX,\n      positionY,\n      onDrag,\n      width,\n      inputPorts,\n      outputPorts,\n      isSelected,\n      onSelectNode,\n      onOutportDragStarted,\n      onInportDrop,\n      onDragStop\n    } = this.props;\n    var classes = [\"node\"];\n    if (isSelected) {\n      classes.push(\"nodeselected\");\n    }\n    var isConfirmedInThisSession =\n      currentSessionID === nodeConfirmedInSessionWithID;\n    if (!isConfirmedInThisSession) {\n      classes.push(\"notconfirmed\");\n    }\n    return (\n      <Draggable\n        scale={scale}\n        position={{ x: positionX, y: positionY }}\n        onDrag={onDrag}\n        onStop={onDragStop}\n        handle=\"header\"\n        onMouseDown={e => {\n          e.stopPropagation();\n          console.log(\"node clicked\");\n          onSelectNode(nodeIndex);\n        }}\n      >\n        <div\n          className={classes.join(\" \")}\n          style={{\n            height: `${(inputPorts.length + outputPorts.length + 1) *\n              (rowHeight - 1)}px`,\n            width: `${width}px`\n          }}\n        >\n          <div className=\"main_area\">\n            <div className=\"addin noselect\">+</div>\n            <header className=\"nodetext noselect\">{title}</header>\n            <div className=\"addout noselect\">+</div>\n          </div>\n          {inputPorts.map((port, portIndex) => {\n            return (\n              <InPort\n                key={portIndex}\n                name={port.name}\n                nodeIndex={nodeIndex}\n                portIndex={portIndex}\n                onInportDrop={onInportDrop}\n              />\n            );\n          })}\n\n          {outputPorts.map((port, portIndex) => {\n            return (\n              <OutPort\n                key={portIndex}\n                name={port.name}\n                nodeIndex={nodeIndex}\n                portIndex={portIndex}\n                onOutportDragStarted={() => {\n                  console.log(\"onOutportDragStarted\");\n                  onOutportDragStarted(nodeIndex, portIndex);\n                }}\n              />\n            );\n          })}\n        </div>\n      </Draggable>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport BezierCurve from \"./BezierCurve\";\nimport {\n  positionNodeAction,\n  positionEveryOtherNodeAction,\n  selectNodeAction,\n  selectConnectionAction,\n  selectClearAction,\n  createNodeAction,\n  outportDragStartedAction,\n  dragCancelledAction,\n  inportDropAction,\n  dragMousePositionAction,\n  dragStopAction\n} from \"../redux/actions\";\nimport {\n  InOutNode,\n  inPortRelativePosition,\n  outPortRelativePosition\n} from \"./InOutNode\";\nimport { payLoadTypeOutport } from \"../redux/reducers\";\nimport { invalidMousePosition } from \"../InitialState\";\nimport { InOutNodeProps } from \"./InOutNode\";\nimport { DraggableEvent, DraggableData } from \"react-draggable\";\n\nclass GraphicsAreaPureHTML extends React.Component<any, {}> {\n  private myRef = React.createRef<HTMLDivElement>();\n  render() {\n    return (\n      <div\n        id=\"nodearea\"\n        ref={this.myRef}\n        className=\"nodearea bgpattern\"\n        onMouseDown={e => {\n          console.log(\"graphicsarea clicked\");\n          this.props.onSelectClear();\n        }}\n        onMouseUp={this.props.onDragCancelled}\n        onMouseMove={e => {\n          // See React Refs and TypeScript: https://medium.com/@martin_hotell/react-refs-with-typescript-a32d56c4d315\n          const area = this.myRef.current;\n          if (area) {\n            var rect = area.getBoundingClientRect();\n            var x = (e.clientX - rect.left) / this.props.scale; //x position within the element.\n            var y = (e.clientY - rect.top) / this.props.scale; //y position within the element.\n\n            if (this.props.isDragInProgress) {\n              // console.log(\"mouse move\", x, y);\n              this.props.onDragMousePosition(x, y);\n            }\n          }\n        }}\n        onDragOver={e => {\n          e.preventDefault();\n        }}\n        // See Event in TypeScript: https://stackoverflow.com/questions/28900077/why-is-event-target-not-element-in-typescript\n        onDrop={(e: React.DragEvent<HTMLDivElement>) => {\n          if (e.dataTransfer != null) {\n            var textData = e.dataTransfer.getData(\"text\");\n            console.log(\"textData\", textData);\n            if (textData != null && textData !== \"\") {\n              var payLoad = JSON.parse(textData);\n              console.log(\"dropped on nodearea\", e, e.clientX, e.clientY);\n              if (payLoad.type === \"CREATE_NODE\") {\n                const targetElement = e.target as HTMLDivElement;\n                if (targetElement) {\n                  var rect = targetElement.getBoundingClientRect();\n                  var x = (e.clientX - rect.left) / this.props.scale; //x position within the element.\n                  var y = (e.clientY - rect.top) / this.props.scale; //y position within the element.\n\n                  this.props.onCreateNode(\n                    x,\n                    y,\n                    payLoad.templateIndex,\n                    payLoad.title\n                  );\n                }\n              }\n            }\n          }\n        }}\n      >\n        <div\n          className=\"graphicsarea\"\n          style={{ transform: \"scale(\" + this.props.scale + \")\" }}\n        >\n          <svg\n            className=\"arrowsvg\"\n            style={{ position: \"relative\", top: \"0px\", left: \"0px\" }}\n          >\n            {// Draw a curve during drag\n            (() => {\n              if (\n                this.props.isDragInProgress &&\n                this.props.dragPayload.type === payLoadTypeOutport &&\n                this.props.dragMousePosition.x !== invalidMousePosition\n              ) {\n                var fromNode = this.props.nodes[\n                  this.props.dragPayload.nodeIndex\n                ];\n                var fromX =\n                  fromNode.position.x +\n                  outPortRelativePosition(\n                    fromNode,\n                    this.props.dragPayload.portIndex\n                  ).x;\n                var fromY =\n                  fromNode.position.y +\n                  outPortRelativePosition(\n                    fromNode,\n                    this.props.dragPayload.portIndex\n                  ).y;\n                var toX = this.props.dragMousePosition.x;\n                var toY = this.props.dragMousePosition.y;\n                return (\n                  <BezierCurve\n                    key={0}\n                    isSelected={false}\n                    isConfirmed={false}\n                    connectionIndex={0}\n                    onSelectConnection={() => {}}\n                    start={{ x: fromX, y: fromY }}\n                    end={{ x: toX, y: toY }}\n                    c1={{\n                      x: fromX + (fromNode.width * 3) / 4,\n                      y: fromY\n                    }}\n                    c2={{\n                      x: toX - (fromNode.width * 3) / 4,\n                      y: toY\n                    }}\n                    curveColor=\"black\"\n                    curveWidth={3}\n                  />\n                );\n              }\n            })()}\n\n            {// Draw all connections between nodes\n            this.props.connections.map((key: any, index: number) => {\n              var fromNode = this.props.nodes[key.from.nodeIndex];\n              var toNode = this.props.nodes[key.to.nodeIndex];\n              var fromX =\n                fromNode.position.x +\n                outPortRelativePosition(fromNode, key.from.index).x;\n              var fromY =\n                fromNode.position.y +\n                outPortRelativePosition(fromNode, key.from.index).y;\n              var toX =\n                toNode.position.x +\n                inPortRelativePosition(toNode, key.to.index).x;\n              var toY =\n                toNode.position.y +\n                inPortRelativePosition(toNode, key.to.index).y;\n              return (\n                <BezierCurve\n                  key={index}\n                  isSelected={key.isSelected}\n                  isConfirmed={\n                    this.props.currentSessionID === key.confirmedInSessionWithID\n                  }\n                  connectionIndex={index}\n                  onSelectConnection={this.props.onSelectConnection}\n                  start={{ x: fromX, y: fromY }}\n                  end={{ x: toX, y: toY }}\n                  c1={{\n                    x: fromX + (fromNode.width * 3) / 4,\n                    y: fromY\n                  }}\n                  c2={{\n                    x: toX - (toNode.width * 3) / 4,\n                    y: toY\n                  }}\n                  curveColor=\"black\"\n                  curveWidth={3}\n                />\n              );\n            })}\n          </svg>\n\n          {this.props.nodes.map((key: any, index: number) => {\n            const nodeProps: InOutNodeProps = {\n              title: key.title,\n              nodeIndex: index,\n              currentSessionID: this.props.currentSessionID,\n              nodeConfirmedInSessionWithID: key.nodeConfirmedInSessionWithID,\n              scale: this.props.scale,\n              positionX: key.position.x,\n              positionY: key.position.y,\n              inputPorts: key.inputPorts,\n              outputPorts: key.outputPorts,\n              width: key.width,\n              isSelected: key.isSelected,\n              onDrag: (e: DraggableEvent, data: DraggableData) => {\n                this.props.onSetPosition(\n                  index,\n                  { x: data.x, y: data.y },\n                  this.props.stressTest\n                );\n              },\n              onDragStop: this.props.onDragStop,\n              onSelectNode: this.props.onSelectNode,\n              onOutportDragStarted: this.props.onOutportDragStarted,\n              onInportDrop: (nodeIndex: number, portIndex: number) => {\n                if (this.props.isDragInProgress) {\n                  this.props.onInportDrop(\n                    nodeIndex,\n                    portIndex,\n                    this.props.isDragInProgress,\n                    this.props.dragPayload,\n                    this.props.nodes[this.props.dragPayload.nodeIndex].id,\n                    this.props.nodes[nodeIndex].id\n                  );\n                }\n              }\n            };\n            return <InOutNode key={index} {...nodeProps} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  nodes: state.present.nodes,\n  connections: state.present.connections,\n  scale: state.present.scale,\n  currentSessionID: state.present.currentSessionID,\n  stressTest: state.present.stressTest,\n  isDragInProgress: state.present.isDragInProgress,\n  dragPayload: state.present.dragPayload,\n  dragMousePosition: state.present.dragMousePosition\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onSetPosition: (index: number, position: any, stressTest: boolean) => {\n    if (stressTest) {\n      dispatch(positionEveryOtherNodeAction(index, position));\n    } else {\n      dispatch(positionNodeAction(index, position));\n    }\n  },\n  onSelectNode: (nodeIndex: number) => dispatch(selectNodeAction(nodeIndex)),\n  onSelectConnection: (connectionIndex: number) =>\n    dispatch(selectConnectionAction(connectionIndex)),\n  onSelectClear: () => dispatch(selectClearAction()),\n  onCreateNode: (x: number, y: number, index: number, title: string) =>\n    dispatch(createNodeAction(x, y, index, title)),\n  onOutportDragStarted: (nodeIndex: number, portIndex: number) => {\n    dispatch(outportDragStartedAction(nodeIndex, portIndex));\n  },\n  onInportDrop: (\n    nodeIndex: number,\n    portIndex: number,\n    isDragInProgress: boolean,\n    dragPayload: any,\n    fromNodeId: string,\n    toNodeId: string\n  ) =>\n    dispatch(\n      inportDropAction(\n        nodeIndex,\n        portIndex,\n        isDragInProgress,\n        dragPayload,\n        fromNodeId,\n        toNodeId\n      )\n    ),\n  onDragStop: () => dispatch(dragStopAction()),\n  onDragCancelled: () => dispatch(dragCancelledAction()),\n  onDragMousePosition: (x: number, y: number) =>\n    dispatch(dragMousePositionAction(x, y))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GraphicsAreaPureHTML);\n","import React from \"react\";\nimport $ from \"jquery\";\nwindow.jQuery = window.$ = $;\nrequire(\"jqueryui\");\nvar draw2d = require(\"draw2d\");\n\nexport default class CanvasDraw2D extends React.Component {\n  componentDidMount() {\n    this.renderCanvas(\"mycanvasdraw2d\");\n  }\n\n  renderCanvas(canvasId) {\n    var canvas = new draw2d.Canvas(canvasId);\n\n    // create and add two nodes which contains Ports (In and OUT)\n    //\n    var start = new draw2d.shape.node.Start();\n    var end = new draw2d.shape.node.End();\n\n    // ...add it to the canvas\n    canvas.add(start, 50, 50);\n    canvas.add(new draw2d.shape.node.Start(), 50, 250);\n    canvas.add(end, 230, 150);\n\n    // Create a Connection and connect the Start and End node\n    //\n    var c = new draw2d.Connection();\n    c.setRouter(new draw2d.layout.connection.SplineConnectionRouter());\n\n    // Set the endpoint decorations for the connection\n    //\n    c.setSourceDecorator(new draw2d.decoration.connection.BarDecorator());\n    c.setTargetDecorator(new draw2d.decoration.connection.DiamondDecorator());\n    // Connect the endpoints with the start and end port\n    //\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n\n    // and finally add the connection to the canvas\n    canvas.add(c);\n\n    var figure = new draw2d.shape.analog.OpAmp();\n    canvas.add(figure, 350, 110);\n\n    var p1 = new draw2d.shape.basic.Polygon();\n    var p2 = new draw2d.shape.basic.Polygon();\n\n    canvas.add(p1, 450, 150);\n    canvas.add(p2, 450, 200);\n\n    p2.setBackgroundColor(\"#f0f000\");\n    p2.setAlpha(0.7);\n    p2.setDimension(100, 60);\n\n    canvas.setCurrentSelection(p2);\n\n    var shape = new draw2d.shape.basic.Text();\n\n    shape.setText(\"This is a simple text with some loooooong word in.\");\n    shape.setBackgroundColor(\"#f0f000\");\n\n    canvas.add(shape, 550, 10);\n\n    var lshape = new draw2d.shape.basic.Label();\n\n    lshape.setText(\"This is a label.\");\n    lshape.setBackgroundColor(\"#f0f000\");\n\n    canvas.add(lshape, 350, 70);\n\n    var pie = new draw2d.shape.diagram.Pie(80, 80);\n    pie.setWidth(100);\n    pie.setData([30, 60, 122, 4]);\n    canvas.add(pie, 600, 160);\n\n    var postit = new draw2d.shape.note.PostIt();\n    postit.installEditor(new draw2d.ui.LabelInplaceEditor());\n    postit.setColor(\"#000000\");\n    postit.setPadding(20);\n\n    postit.setText(\"This is simple sticky note\\nDouble click to edit.\");\n\n    canvas.add(postit, 700, 10);\n\n    var label = new draw2d.shape.basic.Label();\n\n    label.installEditor(new draw2d.ui.LabelInplaceEditor());\n    label.setText(\"Double click me to edit\");\n\n    canvas.add(label, 50, 10);\n\n    // Override the default connection type. This is used during drag&drop operations of ports.\n    //\n    draw2d.Connection.createConnection = function(sourcePort, targetPort) {\n      // return my special kind of connection\n      var con = new draw2d.Connection();\n      con.setRouter(new draw2d.layout.connection.FanConnectionRouter());\n      return con;\n    };\n\n    // create and add two nodes which contains Ports (In and OUT)\n    //\n    start = new draw2d.shape.node.Start();\n    end = new draw2d.shape.node.End();\n\n    // ...add it to the canvas\n    canvas.add(start, 50, 250);\n    canvas.add(end, 230, 280);\n\n    // first Connection\n    //\n    c = draw2d.Connection.createConnection();\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n    canvas.add(c);\n\n    // second Connection\n    //\n    c = draw2d.Connection.createConnection();\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n    canvas.add(c);\n\n    // third Connection\n    //\n    c = draw2d.Connection.createConnection();\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n    canvas.add(c);\n\n    // fourth Connection\n    //\n    c = draw2d.Connection.createConnection();\n    c.setSource(start.getOutputPort(0));\n    c.setTarget(end.getInputPort(0));\n    canvas.add(c);\n\n    // Zoom mose wheel support\n    canvas.installEditPolicy(new draw2d.policy.canvas.WheelZoomPolicy());\n    shape = new draw2d.shape.basic.Text({\n      text: \"Use the mouse wheel + SHIFT to zoom\"\n    });\n\n    canvas.add(shape, 400, 300);\n\n    // Register some callbacks\n    canvas.on(\"select\", function(emitter, event) {\n      if (event.figure !== null) {\n        console.log(\"figure selected\");\n      } else {\n        console.log(\"selection cleared\");\n      }\n    });\n\n    $(\"#mycanvasdraw2d\").click(function(ev) {\n      console.log(\"Mouse click:\" + ev.clientX + \",\" + ev.clientY);\n    });\n\n    // Log state to console\n    var writer = new draw2d.io.json.Writer();\n    writer.marshal(canvas, json => console.log(json));\n\n    // Custom shape\n    {\n      class CustomFigure extends draw2d.SVGFigure {\n        constructor(attr) {\n          super(attr);\n\n          this.index = 0;\n          this.svgs = [];\n\n          this.svgs.push(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\">' +\n              '  <path stroke=\"#000\" fill=\"#FFF\" stroke-miterlimit=\"4\" d=\"m0,49.842l0,-49.742l49.982,0l0,49.742l-49.982,0z\" id=\"polygon3873\"/>' +\n              '  <text text-anchor=\"middle\" fill=\"#000000\" font-family=\"Sans-serif\" x=\"24.81563\" y=\"26.50938\" xml:space=\"preserve\" font-size=\"8px\" id=\"svg_1\">Click me</text>' +\n              \"</svg>\"\n          );\n\n          this.svgs.push(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">' +\n              '<rect x=\"14\" y=\"23\" width=\"20\" height=\"20\" fill=\"lime\" stroke=\"black\" />' +\n              \"</svg>\"\n          );\n\n          this.on(\n            \"click\",\n            function() {\n              this.index = ++this.index % this.svgs.length;\n              this.setSVG(this.svgs[this.index], 500);\n            },\n            this\n          );\n        }\n\n        getSVG() {\n          return this.svgs[0];\n        }\n      }\n\n      var fig = new CustomFigure();\n\n      canvas.add(fig, 100, 100);\n    }\n  }\n\n  render() {\n    return <div id=\"mycanvasdraw2d\"></div>;\n  }\n}\n\nexport class GraphicsAreaDraw2D extends React.Component {\n  render() {\n    return (\n      <div className=\"graphicsarea\" style={{ transform: \"scale(1)\" }}>\n        <CanvasDraw2D className=\"canvas2darea\" />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { websocketClientSetup } from \"./websocketClientUtils\";\n\nimport \"./App.css\";\nimport \"./NodeList.css\";\nimport { NodeList } from \"./components/NodeList\";\n\nimport GraphicsAreaPureHTML from \"./components/GraphicsAreaPureHTML\";\nimport GraphicsAreaDraw2D from \"./components/CanvasDraw2D\";\n\nimport \"katex/dist/katex.min.css\";\nimport FileSaver from \"file-saver\";\n\nimport TopBar from \"./components/TopBar\";\nimport {\n  zoomAction,\n  deleteSelectedAction,\n  toggleGraphicsLibraryAction,\n  resetStateNormalAction,\n  resetStateStressTestAction,\n  loadDefaultNodeTemplatesAsyncAction,\n  loadOtherNodeTemplatesAsyncAction,\n  reconnectAction,\n  syncAction,\n  loadStateFromStringAction,\n  createNodeAction\n} from \"./redux/actions\";\nimport { ActionCreators } from \"redux-undo\";\nimport ServerGraph from \"./components/ServerGraph\";\n\nvar reader = new FileReader();\nvar file;\n\nclass App extends React.Component {\n  componentDidMount() {\n    document.body.addEventListener(\"keydown\", e => {\n      console.log(\"key down \", e, this);\n      if (e.key === \"Backspace\" || e.key === \"Delete\") {\n        this.props.deleteSelected(this.props.state);\n      }\n    });\n\n    websocketClientSetup();\n  }\n\n  componentWillUnmount() {\n    //document.body.removeEventListener(\"keydown\", ???);\n  }\n\n  render() {\n    return (\n      <div className=\"App noselect\">\n        <div className=\"messagerow\">\n          {this.props.state.currentSessionID === \"\"\n            ? \"Server disconnected\"\n            : \"Server online\"}\n          {this.props.state.isDragInProgress === true\n            ? \" Draggning \" + this.props.state.dragPayload.type\n            : \"\"}\n        </div>\n        <div\n          className=\"buttonrow\"\n          style={{ display: \"flex\", justifyContent: \"space-around\" }}\n        >\n          <button onClick={this.props.reconnect}>New session</button>\n          <button onClick={this.props.onUndo}>\n            Undo ({this.props.sizePast})\n          </button>\n          <button onClick={this.props.onRedo}>\n            Redo ({this.props.sizeFuture})\n          </button>\n          <button\n            onClick={() => {\n              var input = document.createElement(\"input\");\n              input.type = \"file\";\n\n              input.onchange = e => {\n                console.log(\"File loaded onchange\");\n                // getting a hold of the file reference\n                file = e.target.files[0];\n\n                // setting up the reader\n                reader.readAsText(file, \"UTF-8\");\n\n                // here we tell the reader what to do when it's done reading...\n                reader.onload = readerEvent => {\n                  console.log(\"File loaded\");\n                  var content = readerEvent.target.result; // this is the content!\n                  this.props.onLoadStateFromString(content);\n                };\n              };\n              input.click();\n            }}\n          >\n            Load state\n          </button>\n          <button\n            onClick={() => {\n              var stateString = JSON.stringify(this.props.state, null, 2);\n              var blob = new Blob([stateString], {\n                type: \"text/plain;charset=utf-8\"\n              });\n              FileSaver.saveAs(blob, \"state.json\");\n            }}\n          >\n            Save state\n          </button>\n\n          <button\n            onClick={() =>\n              this.props.sync(\n                this.props.state.currentSessionID,\n                this.props.state.nodes,\n                this.props.state.connections\n              )\n            }\n          >\n            Sync\n          </button>\n          <button onClick={() => this.props.deleteSelected(this.props.state)}>\n            Del\n          </button>\n          <button onClick={this.props.resetStateNormal}>Some nodes</button>\n          <button onClick={this.props.resetStateStressTest}>Stress test</button>\n          <button onClick={this.props.toggleGraphicsLibrary}>\n            Pure HTML / Draw2D\n          </button>\n        </div>\n        <TopBar\n          className=\"topbar\"\n          showControls={this.props.state.pureHTMLgraph}\n          scale={this.props.state.scale * 100}\n          state={this.props.state}\n          onChange={this.props.onZoomChange}\n        />\n        <div className=\"editor\">\n          <div className=\"nodelist\">\n            <NodeList\n              templates={this.props.state.nodeTemplates}\n              onLoadDefault={this.props.onLoadDefault}\n              onLoadOther={this.props.onLoadOther}\n              onCreateNode={this.props.onCreateNode}\n            />\n          </div>\n          {this.props.state.pureHTMLgraph ? (\n            <GraphicsAreaPureHTML />\n          ) : (\n            <GraphicsAreaDraw2D />\n          )}\n          {this.props.state.currentSessionID === \"\" ? \"\" : <ServerGraph />}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state: state.present,\n  sizePast: state.past.length,\n  sizeFuture: state.future.length\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteSelected: state => dispatch(deleteSelectedAction(state)),\n  onZoomChange: scale => dispatch(zoomAction(scale)),\n  toggleGraphicsLibrary: () => dispatch(toggleGraphicsLibraryAction()),\n  resetStateNormal: () => dispatch(resetStateNormalAction()),\n  resetStateStressTest: () => dispatch(resetStateStressTestAction()),\n  onLoadDefault: () => dispatch(loadDefaultNodeTemplatesAsyncAction()),\n  onLoadOther: () => dispatch(loadOtherNodeTemplatesAsyncAction()),\n  reconnect: () => dispatch(reconnectAction()),\n  sync: (currentSessionID, nodes, connections) => {\n    dispatch(syncAction(currentSessionID, nodes, connections));\n  },\n  onLoadStateFromString: string => dispatch(loadStateFromStringAction(string)),\n  onUndo: () => dispatch(ActionCreators.undo()),\n  onRedo: () => dispatch(ActionCreators.redo()),\n  onCreateNode: (templateIndex, title) =>\n    dispatch(createNodeAction(100, 50, templateIndex, title))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport \"rc-slider/assets/index.css\";\nimport \"rc-tooltip/assets/bootstrap.css\";\n\nimport Tooltip from \"rc-tooltip\";\nimport Slider from \"rc-slider\";\nimport { connect } from \"react-redux\";\n\nconst Handle = Slider.Handle;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nconst TopBar = props => {\n  if (props.showControls) {\n    return (\n      <div className=\"topbar\">\n        <div className=\"zoom\">\n          <Slider\n            min={20}\n            max={150}\n            value={props.scale}\n            handle={handle}\n            onChange={props.onChange}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return <div className=\"topbar\"></div>;\n  }\n};\n\nexport default connect()(TopBar);\n","import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { connect } from \"react-redux\";\nimport { getGraphJSONFromServerAction } from \"../redux/actions\";\nimport Immutable from \"immutable\";\n\nconst events = {\n  select: function(event) {\n    // var { nodes, edges } = event;\n    // console.log(\"Selected nodes:\");\n    // console.log(nodes);\n    // console.log(\"Selected edges:\");\n    // console.log(edges);\n  }\n};\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nclass ServerGraph extends React.Component {\n  shouldComponentUpdate(newProps) {\n    var newPropsMap = Immutable.fromJS(newProps.serverGraph);\n    var propsMap = Immutable.fromJS({\n      nodes: this.props.serverGraph.nodes,\n      // Remove id: from the edges because it is added for some reason\n      edges: this.props.serverGraph.edges.map(n => {\n        return {\n          from: n.from,\n          to: n.to\n        };\n      })\n    });\n\n    if (propsMap.equals(newPropsMap)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  componentDidMount() {\n    window.setInterval(this.props.onTimer, 5000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval();\n  }\n\n  render() {\n    return (\n      <div className=\"servergraph\">\n        <h1>Server representation</h1>\n        <Graph\n          graph={this.props.serverGraph}\n          options={options}\n          events={events}\n          style={{ height: \"100%\" }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  serverGraph: state.present.serverGraph\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTimer: () => dispatch(getGraphJSONFromServerAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServerGraph);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport graphEditorReducer from \"./redux/reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport thunk from \"redux-thunk\";\nimport undoable from \"redux-undo\";\nimport { groupByActionTypes, excludeAction } from \"redux-undo\";\nimport { createLogger } from \"redux-logger\";\nimport {\n  POSITION_NODE,\n  DRAG_MOUSE_POSITION,\n  CONFIRM_NODE,\n  DRAG_CANCELLED,\n  SELECT_CLEAR,\n  OUTPORT_DRAG_STARTED,\n  CHANGE_ZOOM,\n  INPORT_DROP,\n  SELECT_NODE,\n  POSITION_EVERY_OTHER_NODE,\n  SET_GRAPH_FROM_SERVER,\n  CONFIRM_CONNECTION\n} from \"./redux/actions\";\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst logger = createLogger({\n  collapsed: (getState, action) =>\n    action.type === POSITION_NODE || action.type === DRAG_MOUSE_POSITION\n});\n\nexport const store = createStore(\n  undoable(graphEditorReducer, {\n    groupBy: groupByActionTypes([POSITION_EVERY_OTHER_NODE, CHANGE_ZOOM]),\n    filter: excludeAction([\n      POSITION_NODE,\n      CONFIRM_NODE,\n      CONFIRM_CONNECTION,\n      OUTPORT_DRAG_STARTED,\n      INPORT_DROP,\n      DRAG_MOUSE_POSITION,\n      DRAG_CANCELLED,\n      SELECT_CLEAR,\n      SELECT_NODE,\n      SET_GRAPH_FROM_SERVER\n    ])\n  }),\n  composeEnhancer(applyMiddleware(thunk, logger))\n\n  // other store enhancers if any\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}