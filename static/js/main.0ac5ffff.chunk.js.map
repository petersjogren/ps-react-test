{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createSliderWithTooltip","Slider","Range","Handle","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","key","wrapperStyle","width","margin","ShowPosition","label","position","x","y","InputNumber","type","this","onChange","handleChange","setToValue","onClick","handleClick","React","Component","kNoMetod","nodeId","direction","App","state","radius","cx","scale","over","activeDrags","deltaPosition","nodes","id","inputPorts","name","outputPorts","connections","from","nodeIndex","to","knobValue","onStart","setState","onStop","onControlledDrag","e","newState","dragHandlers","className","style","min","max","defaultValue","tagName","filename","exportFile","JSON","stringify","transform","map","onControlledDragStop","methodIndex","onMouseEnter","onMouseOut","event","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ac5ffff.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport DownloadLink from \"react-download-link\";\n\nimport \"rc-slider/assets/index.css\";\nimport \"rc-tooltip/assets/bootstrap.css\";\n\nimport Tooltip from \"rc-tooltip\";\nimport Slider from \"rc-slider\";\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\nconst Range = createSliderWithTooltip(Slider.Range);\nconst Handle = Slider.Handle;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nconst wrapperStyle = { width: 400, margin: 50 };\n\nconst ShowPosition = props => (\n  <h4>\n    {props.label} = ({props.position.x}, {props.position.y})\n  </h4>\n);\n\nclass InputNumber extends React.Component {\n  render(props) {\n    return (\n      <div>\n        <input\n          type=\"number\"\n          value={this.props.value}\n          onChange={this.props.handleChange}\n        />\n        <input\n          type=\"button\"\n          value={\"Click me \" + this.props.setToValue}\n          onClick={this.props.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nconst kNoMetod = { nodeId: -1, direction: \"input\", type: \"N/A\" };\n\nclass App extends React.Component {\n  state = {\n    radius: 20,\n    cx: 100,\n    scale: 0.9,\n    over: kNoMetod,\n    activeDrags: 0,\n    deltaPosition: {\n      x: 0,\n      y: 0\n    },\n    nodes: [\n      {\n        id: 213,\n        position: {\n          x: 250,\n          y: 0\n        },\n        inputPorts: [{ name: \"x\", type: \"int\" }],\n        outputPorts: [\n          { name: \"out x\", type: \"float\" },\n          { name: \"out y\", type: \"float\" }\n        ]\n      },\n      {\n        id: 19,\n        position: {\n          x: 0,\n          y: 0\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" },\n          { name: \"the grid\", type: \"se.minerva.Grid\" }\n        ],\n        outputPorts: [\n          { name: \"result x\", type: \"float\" },\n          { name: \"result y\", type: \"float\" },\n          { name: \"result z\", type: \"float\" }\n        ]\n      },\n      {\n        id: 23,\n        position: {\n          x: 500,\n          y: 0\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" }\n        ],\n        outputPorts: [\n          { name: \"red\", type: \"int\" },\n          { name: \"blue\", type: \"int\" },\n          { name: \"green\", type: \"int\" },\n          { name: \"alpha\", type: \"float\" },\n          { name: \"grid\", type: \"se.minerva.Grid\" }\n        ]\n      }\n    ],\n    connections: [\n      {\n        from: {\n          nodeIndex: 0,\n          index: 0\n        },\n        to: {\n          nodeIndex: 1,\n          index: 1\n        }\n      },\n      {\n        from: {\n          nodeIndex: 2,\n          index: 4\n        },\n        to: {\n          nodeIndex: 1,\n          index: 2\n        }\n      }\n    ],\n    knobValue: 50\n  };\n\n  onStart = () => {\n    this.setState({ activeDrags: this.state.activeDrags + 1 });\n  };\n\n  onStop = () => {\n    this.setState({ activeDrags: this.state.activeDrags - 1 });\n  };\n\n  // For controlled component\n\n  onControlledDrag = (e, position, index) => {\n    var newState = { ...this.state };\n    newState.nodes[index].position.x = position.x;\n    newState.nodes[index].position.y = position.y;\n    this.setState(newState);\n  };\n\n  onControlledDragStop(index) {\n    return (e, position) => {\n      this.onControlledDrag(e, position, index);\n      this.onStop();\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state.radius = 20;\n  }\n\n  render(props) {\n    const dragHandlers = { onStart: this.onStart, onStop: this.onStop };\n    return (\n      <div className=\"App\">\n        <div style={wrapperStyle}>\n          <p>Zoom</p>\n          <Slider\n            min={20}\n            max={150}\n            defaultValue={100}\n            handle={handle}\n            onChange={value => this.setState({ scale: value / 100 })}\n          />\n        </div>\n        <DownloadLink\n          label=\"Save state to disk\"\n          tagName=\"h2\"\n          filename=\"state.txt\"\n          exportFile={() => JSON.stringify(this.state, null, 2)}\n        >\n          <h1>Save state to disk</h1>\n        </DownloadLink>\n        <div style={{ transform: \"scale(\" + this.state.scale + \")\" }}>\n          {this.state.nodes.map((key, index) => (\n            <Draggable\n              handle=\"strong\"\n              position={this.state.nodes[index].position}\n              {...dragHandlers}\n              onStop={this.onControlledDragStop(index)}\n            >\n              <div className=\"box no-cursor\">\n                <strong className=\"cursor\">\n                  <div className=\"drag\">Drag here</div>\n                </strong>\n                I have id {this.state.nodes[index].id}\n                <ShowPosition\n                  label={\"Position \" + index}\n                  position={this.state.nodes[index].position}\n                />\n                My input methods are <br />\n                <ul>\n                  {this.state.nodes[index].inputPorts.map(\n                    (key, methodIndex) => (\n                      <li\n                        className={\n                          this.state.over != null &&\n                          this.state.over.direction !== \"input\" &&\n                          this.state.over.nodeId !==\n                            this.state.nodes[index].id &&\n                          key.type === this.state.over.type\n                            ? \"list-bold-view\"\n                            : \"list-view\"\n                        }\n                        onMouseEnter={e =>\n                          this.setState({\n                            over: {\n                              nodeId: this.state.nodes[index].id,\n                              direction: \"input\",\n                              type: this.state.nodes[index].inputPorts[\n                                methodIndex\n                              ].type\n                            }\n                          })\n                        }\n                        onMouseOut={e =>\n                          this.setState({\n                            over: kNoMetod\n                          })\n                        }\n                      >\n                        {this.state.nodes[index].inputPorts[methodIndex].name +\n                          \": \" +\n                          this.state.nodes[index].inputPorts[methodIndex].type}\n                      </li>\n                    )\n                  )}\n                </ul>\n                <br />\n                My output methods are <br />\n                <ul>\n                  {this.state.nodes[index].outputPorts.map(\n                    (key, methodIndex) => (\n                      <li\n                        className={\n                          this.state.over != null &&\n                          this.state.over.direction !== \"output\" &&\n                          this.state.over.nodeId !==\n                            this.state.nodes[index].id &&\n                          key.type === this.state.over.type\n                            ? \"list-bold-view\"\n                            : \"list-view\"\n                        }\n                        onMouseEnter={e =>\n                          this.setState({\n                            over: {\n                              nodeId: this.state.nodes[index].id,\n                              direction: \"output\",\n                              type: this.state.nodes[index].outputPorts[\n                                methodIndex\n                              ].type\n                            }\n                          })\n                        }\n                        onMouseOut={e =>\n                          this.setState({\n                            over: kNoMetod\n                          })\n                        }\n                      >\n                        {this.state.nodes[index].outputPorts[methodIndex].name +\n                          \": \" +\n                          this.state.nodes[index].outputPorts[methodIndex].type}\n                      </li>\n                    )\n                  )}\n                </ul>\n              </div>\n            </Draggable>\n          ))}\n        </div>\n\n        <div className=\"position-view\">\n          {this.state.nodes.map((key, index) => (\n            <ShowPosition\n              label={\"Position \" + index}\n              position={this.state.nodes[index].position}\n            />\n          ))}\n          <InputNumber\n            setToValue=\"99\"\n            value={this.state.nodes[0].position.x}\n            handleClick={props => {\n              var newState = { ...this.state };\n              newState.nodes[0].position.x = 99;\n              return this.setState(newState);\n            }}\n            handleChange={event => {\n              var newState = { ...this.state };\n              newState.nodes[0].position.x =\n                parseInt(event.target.value, 0) || 0;\n              this.setState(newState);\n            }}\n          />\n        </div>\n\n        <div>\n          <ul>\n            {this.state.connections.map((key, index) => (\n              <li className=\"list-view\">\n                {this.state.nodes[key.from.nodeIndex].id +\n                  \":\" +\n                  this.state.nodes[key.from.nodeIndex].outputPorts[\n                    key.from.index\n                  ].name +\n                  \" -> \" +\n                  this.state.nodes[key.to.nodeIndex].id +\n                  \":\" +\n                  this.state.nodes[key.to.nodeIndex].inputPorts[key.to.index]\n                    .name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}