{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ShowPosition","props","label","position","x","y","InputNumber","type","value","this","onChange","handleChange","setToValue","onClick","handleClick","React","Component","kNoMetod","nodeId","direction","App","state","radius","cx","over","activeDrags","deltaPosition","nodes","id","inputPorts","name","outputPorts","connections","from","nodeIndex","index","to","knobValue","onStart","setState","onStop","onControlledDrag","e","newState","dragHandlers","className","tagName","filename","exportFile","JSON","stringify","map","key","handle","onControlledDragStop","methodIndex","onMouseEnter","onMouseOut","event","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7571f838.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport DownloadLink from \"react-download-link\";\n\nconst ShowPosition = props => (\n  <h4>\n    {props.label} = ({props.position.x}, {props.position.y})\n  </h4>\n);\n\nclass InputNumber extends React.Component {\n  render(props) {\n    return (\n      <div>\n        <input\n          type=\"number\"\n          value={this.props.value}\n          onChange={this.props.handleChange}\n        />\n        <input\n          type=\"button\"\n          value={\"Click me \" + this.props.setToValue}\n          onClick={this.props.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nconst kNoMetod = { nodeId: -1, direction: \"input\", type: \"N/A\" };\n\nclass App extends React.Component {\n  state = {\n    radius: 20,\n    cx: 100,\n    over: kNoMetod,\n    activeDrags: 0,\n    deltaPosition: {\n      x: 0,\n      y: 0\n    },\n    nodes: [\n      {\n        id: 213,\n        position: {\n          x: 250,\n          y: 0\n        },\n        inputPorts: [{ name: \"x\", type: \"int\" }],\n        outputPorts: [\n          { name: \"out x\", type: \"float\" },\n          { name: \"out y\", type: \"float\" }\n        ]\n      },\n      {\n        id: 19,\n        position: {\n          x: 0,\n          y: 0\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" },\n          { name: \"the grid\", type: \"se.minerva.Grid\" }\n        ],\n        outputPorts: [\n          { name: \"result x\", type: \"float\" },\n          { name: \"result y\", type: \"float\" },\n          { name: \"result z\", type: \"float\" }\n        ]\n      },\n      {\n        id: 23,\n        position: {\n          x: 500,\n          y: 0\n        },\n        inputPorts: [\n          { name: \"amount\", type: \"int\" },\n          { name: \"temperature\", type: \"float\" }\n        ],\n        outputPorts: [\n          { name: \"red\", type: \"int\" },\n          { name: \"blue\", type: \"int\" },\n          { name: \"green\", type: \"int\" },\n          { name: \"alpha\", type: \"float\" },\n          { name: \"grid\", type: \"se.minerva.Grid\" }\n        ]\n      }\n    ],\n    connections: [\n      {\n        from: {\n          nodeIndex: 0,\n          index: 0\n        },\n        to: {\n          nodeIndex: 1,\n          index: 1\n        }\n      },\n      {\n        from: {\n          nodeIndex: 2,\n          index: 4\n        },\n        to: {\n          nodeIndex: 1,\n          index: 2\n        }\n      }\n    ],\n    knobValue: 50\n  };\n\n  onStart = () => {\n    this.setState({ activeDrags: this.state.activeDrags + 1 });\n  };\n\n  onStop = () => {\n    this.setState({ activeDrags: this.state.activeDrags - 1 });\n  };\n\n  // For controlled component\n\n  onControlledDrag = (e, position, index) => {\n    var newState = { ...this.state };\n    newState.nodes[index].position.x = position.x;\n    newState.nodes[index].position.y = position.y;\n    this.setState(newState);\n  };\n\n  onControlledDragStop(index) {\n    return (e, position) => {\n      this.onControlledDrag(e, position, index);\n      this.onStop();\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state.radius = 20;\n  }\n\n  render(props) {\n    const dragHandlers = { onStart: this.onStart, onStop: this.onStop };\n    return (\n      <div className=\"App\">\n        <DownloadLink\n          label=\"Save state to disk\"\n          tagName=\"h2\"\n          filename=\"state.txt\"\n          exportFile={() => JSON.stringify(this.state, null, 2)}\n        >\n          <h1>Save state to disk</h1>\n        </DownloadLink>\n        {this.state.nodes.map((key, index) => (\n          <Draggable\n            handle=\"strong\"\n            position={this.state.nodes[index].position}\n            {...dragHandlers}\n            onStop={this.onControlledDragStop(index)}\n          >\n            <div className=\"box no-cursor\">\n              <strong className=\"cursor\">\n                <div className=\"drag\">Drag here</div>\n              </strong>\n              I have id {this.state.nodes[index].id}\n              <ShowPosition\n                label={\"Position \" + index}\n                position={this.state.nodes[index].position}\n              />\n              My input methods are <br />\n              <ul>\n                {this.state.nodes[index].inputPorts.map((key, methodIndex) => (\n                  <li\n                    className={\n                      this.state.over != null &&\n                      this.state.over.direction !== \"input\" &&\n                      this.state.over.nodeId !== this.state.nodes[index].id &&\n                      key.type === this.state.over.type\n                        ? \"list-bold-view\"\n                        : \"list-view\"\n                    }\n                    onMouseEnter={e =>\n                      this.setState({\n                        over: {\n                          nodeId: this.state.nodes[index].id,\n                          direction: \"input\",\n                          type: this.state.nodes[index].inputPorts[methodIndex]\n                            .type\n                        }\n                      })\n                    }\n                    onMouseOut={e =>\n                      this.setState({\n                        over: kNoMetod\n                      })\n                    }\n                  >\n                    {this.state.nodes[index].inputPorts[methodIndex].name +\n                      \": \" +\n                      this.state.nodes[index].inputPorts[methodIndex].type}\n                  </li>\n                ))}\n              </ul>\n              <br />\n              My output methods are <br />\n              <ul>\n                {this.state.nodes[index].outputPorts.map((key, methodIndex) => (\n                  <li\n                    className={\n                      this.state.over != null &&\n                      this.state.over.direction !== \"output\" &&\n                      this.state.over.nodeId !== this.state.nodes[index].id &&\n                      key.type === this.state.over.type\n                        ? \"list-bold-view\"\n                        : \"list-view\"\n                    }\n                    onMouseEnter={e =>\n                      this.setState({\n                        over: {\n                          nodeId: this.state.nodes[index].id,\n                          direction: \"output\",\n                          type: this.state.nodes[index].outputPorts[methodIndex]\n                            .type\n                        }\n                      })\n                    }\n                    onMouseOut={e =>\n                      this.setState({\n                        over: kNoMetod\n                      })\n                    }\n                  >\n                    {this.state.nodes[index].outputPorts[methodIndex].name +\n                      \": \" +\n                      this.state.nodes[index].outputPorts[methodIndex].type}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </Draggable>\n        ))}\n\n        <div className=\"position-view\">\n          {this.state.nodes.map((key, index) => (\n            <ShowPosition\n              label={\"Position \" + index}\n              position={this.state.nodes[index].position}\n            />\n          ))}\n          <InputNumber\n            setToValue=\"99\"\n            value={this.state.nodes[0].position.x}\n            handleClick={props => {\n              var newState = { ...this.state };\n              newState.nodes[0].position.x = 99;\n              return this.setState(newState);\n            }}\n            handleChange={event => {\n              var newState = { ...this.state };\n              newState.nodes[0].position.x =\n                parseInt(event.target.value, 0) || 0;\n              this.setState(newState);\n            }}\n          />\n        </div>\n\n        <div>\n          <ul>\n            {this.state.connections.map((key, index) => (\n              <li className=\"list-view\">\n                {this.state.nodes[key.from.nodeIndex].id +\n                  \":\" +\n                  this.state.nodes[key.from.nodeIndex].outputPorts[\n                    key.from.index\n                  ].name +\n                  \" -> \" +\n                  this.state.nodes[key.to.nodeIndex].id +\n                  \":\" +\n                  this.state.nodes[key.to.nodeIndex].inputPorts[key.to.index]\n                    .name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}